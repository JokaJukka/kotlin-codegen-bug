"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""
Represents the access level of a relationship between a User and object that it is related to
"""
type AccessLevel {
  """
  Integer representation of access level.
  """
  integerValue: Int

  """
  String representation of access level.
  """
  stringValue: AccessLevelEnum
}

"""
Representation of a GitLab deploy key.
"""
type AccessLevelDeployKey {
  """
  Expiration date of the deploy key.
  """
  expiresAt: Date

  """
  ID of the deploy key.
  """
  id: ID!

  """
  Title of the deploy key.
  """
  title: String!

  """
  User assigned to the deploy key.
  """
  user: AccessLevelUser!
}

"""
The connection type for AccessLevelDeployKey.
"""
type AccessLevelDeployKeyConnection {
  """
  A list of edges.
  """
  edges: [AccessLevelDeployKeyEdge]

  """
  A list of nodes.
  """
  nodes: [AccessLevelDeployKey]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AccessLevelDeployKeyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AccessLevelDeployKey
}

"""
Access level to a resource
"""
enum AccessLevelEnum {
  """
  No access.
  """
  NO_ACCESS

  """
  Minimal access.
  """
  MINIMAL_ACCESS

  """
  Guest access.
  """
  GUEST

  """
  Reporter access.
  """
  REPORTER

  """
  Developer access.
  """
  DEVELOPER

  """
  Maintainer access.
  """
  MAINTAINER

  """
  Owner access.
  """
  OWNER
}

"""
Representation of a GitLab user.
"""
type AccessLevelUser {
  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  ID of the user.
  """
  id: ID!

  """
  Human-readable name of the user.
  Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  User's public email.
  """
  publicEmail: String

  """
  Username of the user.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
Autogenerated input type of AdminSidekiqQueuesDeleteJobs
"""
input AdminSidekiqQueuesDeleteJobsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Delete jobs matching user in the context metadata.
  """
  user: String

  """
  Delete jobs matching user_id in the context metadata.
  """
  userId: String

  """
  Delete jobs matching project in the context metadata.
  """
  project: String

  """
  Delete jobs matching root_namespace in the context metadata.
  """
  rootNamespace: String

  """
  Delete jobs matching client_id in the context metadata.
  """
  clientId: String

  """
  Delete jobs matching caller_id in the context metadata.
  """
  callerId: String

  """
  Delete jobs matching remote_ip in the context metadata.
  """
  remoteIp: String

  """
  Delete jobs matching job_id in the context metadata.
  """
  jobId: String

  """
  Delete jobs matching pipeline_id in the context metadata.
  """
  pipelineId: String

  """
  Delete jobs matching related_class in the context metadata.
  """
  relatedClass: String

  """
  Delete jobs matching feature_category in the context metadata.
  """
  featureCategory: String

  """
  Delete jobs matching artifact_size in the context metadata.
  """
  artifactSize: String

  """
  Delete jobs matching artifact_used_cdn in the context metadata.
  """
  artifactUsedCdn: String

  """
  Delete jobs matching artifacts_dependencies_size in the context metadata.
  """
  artifactsDependenciesSize: String

  """
  Delete jobs matching artifacts_dependencies_count in the context metadata.
  """
  artifactsDependenciesCount: String

  """
  Delete jobs matching root_caller_id in the context metadata.
  """
  rootCallerId: String

  """
  Delete jobs matching merge_action_status in the context metadata.
  """
  mergeActionStatus: String

  """
  Delete jobs matching bulk_import_entity_id in the context metadata.
  """
  bulkImportEntityId: String

  """
  Delete jobs matching sidekiq_destination_shard_redis in the context metadata.
  """
  sidekiqDestinationShardRedis: String

  """
  Delete jobs with the given worker class.
  """
  workerClass: String

  """
  Name of the queue to delete jobs from.
  """
  queueName: String!
}

"""
Autogenerated return type of AdminSidekiqQueuesDeleteJobs.
"""
type AdminSidekiqQueuesDeleteJobsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Information about the status of the deletion request.
  """
  result: DeleteJobsResponse
}

"""
Configuration details for an Agent
"""
type AgentConfiguration {
  """
  Name of the agent.
  """
  agentName: String
}

"""
The connection type for AgentConfiguration.
"""
type AgentConfigurationConnection {
  """
  A list of edges.
  """
  edges: [AgentConfigurationEdge]

  """
  A list of nodes.
  """
  nodes: [AgentConfiguration]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AgentConfigurationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AgentConfiguration
}

"""
Information about a connected Agent
"""
type AgentMetadata {
  """
  Agent version commit.
  """
  commit: String

  """
  Name of the pod running the Agent.
  """
  podName: String

  """
  Namespace of the pod running the Agent.
  """
  podNamespace: String

  """
  Agent version tag.
  """
  version: String
}

"""
Agent token statuses
"""
enum AgentTokenStatus {
  """
  Active agent token.
  """
  ACTIVE

  """
  Revoked agent token.
  """
  REVOKED
}

"""
Assignee ID wildcard values
"""
enum AssigneeWildcardId {
  """
  No assignee is assigned.
  """
  NONE

  """
  An assignee is assigned.
  """
  ANY
}

"""
Represents the YAML definitions for audit events defined in `ee/config/audit_events/types/<event-type-name>.yml` and `config/audit_events/types/<event-type-name>.yml`.
"""
type AuditEventDefinition {
  """
  Description of what action the audit event tracks.
  """
  description: String!

  """
  Feature category associated with the event.
  """
  featureCategory: String!

  """
  Link to the issue introducing the event. For olderaudit events, it can be a commit URL rather than amerge request URL.
  """
  introducedByIssue: String

  """
  Link to the merge request introducing the event. Forolder audit events, it can be a commit URL rather thana merge request URL.
  """
  introducedByMr: String

  """
  Key name of the audit event.
  """
  name: String!

  """
  Indicates if the event is saved to PostgreSQL database.
  """
  savedToDatabase: Boolean!

  """
  Indicates if the event is streamed to an external destination.
  """
  streamed: Boolean!
}

"""
The connection type for AuditEventDefinition.
"""
type AuditEventDefinitionConnection {
  """
  A list of edges.
  """
  edges: [AuditEventDefinitionEdge]

  """
  A list of nodes.
  """
  nodes: [AuditEventDefinition]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AuditEventDefinitionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuditEventDefinition
}

"""
Core representation of a GitLab user.
"""
type AutocompletedUser implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Merge request state related to the user.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
User availability status
"""
enum AvailabilityEnum {
  """
  Not Set
  """
  NOT_SET

  """
  Busy
  """
  BUSY
}

"""
Available fields to be exported as CSV
"""
enum AvailableExportFields {
  """
  Unique identifier.
  """
  ID

  """
  Title.
  """
  TITLE

  """
  Description.
  """
  DESCRIPTION

  """
  Type of the work item.
  """
  TYPE

  """
  Author name.
  """
  AUTHOR

  """
  Author username.
  """
  AUTHOR_USERNAME

  """
  Date of creation.
  """
  CREATED_AT
}

type BaseService implements Service {
  """
  Indicates if the service is active.
  """
  active: Boolean

  """
  Type of the service.
  """
  serviceType: ServiceType

  """
  Class name of the service.
  """
  type: String
}

"""
Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Blame {
  """
  First line of Git Blame for given range.
  """
  firstLine: String

  """
  Git Blame grouped by contiguous lines for commit.
  """
  groups: [Groups!]
}

type Blob implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  LFS ID of the blob.
  """
  lfsOid: String

  """
  Blob mode in numeric format.
  """
  mode: String

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web path of the blob.
  """
  webPath: String

  """
  Web URL of the blob.
  """
  webUrl: String
}

"""
The connection type for Blob.
"""
type BlobConnection {
  """
  A list of edges.
  """
  edges: [BlobEdge]

  """
  A list of nodes.
  """
  nodes: [Blob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Blob
}

"""
Represents how the blob content should be displayed
"""
type BlobViewer {
  """
  Shows whether the blob should be displayed collapsed.
  """
  collapsed: Boolean!

  """
  Content file type.
  """
  fileType: String!

  """
  Shows whether the blob content is loaded asynchronously.
  """
  loadAsync: Boolean!

  """
  Loading partial name.
  """
  loadingPartialName: String!

  """
  Error rendering the blob content.
  """
  renderError: String

  """
  Shows whether the blob is too large to be displayed.
  """
  tooLarge: Boolean!

  """
  Type of blob viewer.
  """
  type: BlobViewersType!
}

"""
Types of blob viewers
"""
enum BlobViewersType {
  """
  Rich blob viewers type.
  """
  rich

  """
  Simple blob viewers type.
  """
  simple

  """
  Auxiliary blob viewers type.
  """
  auxiliary
}

"""
Represents a project or group issue board
"""
type Board {
  """
  Timestamp of when the board was created.
  """
  createdAt: Time!

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean

  """
  ID (global ID) of the board.
  """
  id: ID!

  """
  Lists of the board.
  """
  lists(
    """
    Find a list by its global ID.
    """
    id: ListID

    """
    Filters applied when getting issue metadata in the board list.
    """
    issueFilters: BoardIssueInput

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardListConnection

  """
  Name of the board.
  """
  name: String

  """
  Timestamp of when the board was last updated.
  """
  updatedAt: Time!

  """
  Web path of the board.
  """
  webPath: String!

  """
  Web URL of the board.
  """
  webUrl: String!
}

"""
The connection type for Board.
"""
type BoardConnection {
  """
  A list of edges.
  """
  edges: [BoardEdge]

  """
  A list of nodes.
  """
  nodes: [Board]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BoardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Board
}

"""
A `BoardID` is a global ID. It is encoded as a string.

An example `BoardID` is: `"gid://gitlab/Board/1"`.
"""
scalar BoardID

input BoardIssueInput {
  """
  Filter by label name.
  """
  labelName: [String]

  """
  Filter by author username.
  """
  authorUsername: String

  """
  Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
  """
  myReactionEmoji: String

  """
  List of IIDs of issues. For example `["1", "2"]`.
  """
  iids: [String!]

  """
  Filter by assignee username.
  """
  assigneeUsername: [String]

  """
  Filter by release tag.
  """
  releaseTag: String

  """
  Filter by the given issue types.
  """
  types: [IssueType!]

  """
  List of arguments with inclusive OR.
  """
  or: UnionedIssueFilterInput

  """
  Search query for issue title or description.
  """
  search: String

  """
  Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
  """
  assigneeWildcardId: AssigneeWildcardId

  """
  Filter by confidentiality.
  """
  confidential: Boolean
}

"""
Represents a list for an issue board
"""
type BoardList {
  """
  Indicates if the list is collapsed for this user.
  """
  collapsed: Boolean

  """
  ID (global ID) of the list.
  """
  id: ID!

  """
  Board issues.
  """
  issues(
    """
    Filters applied when selecting issues in the board list.
    """
    filters: BoardIssueInput

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection

  """
  Count of issues in the list.
  """
  issuesCount: Int

  """
  Label of the list.
  """
  label: Label

  """
  Type of the list.
  """
  listType: String!

  """
  Position of list within the board.
  """
  position: Int

  """
  Title of the list.
  """
  title: String!
}

"""
The connection type for BoardList.
"""
type BoardListConnection {
  """
  A list of edges.
  """
  edges: [BoardListEdge]

  """
  A list of nodes.
  """
  nodes: [BoardList]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of BoardListCreate
"""
input BoardListCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Create the backlog list.
  """
  backlog: Boolean

  """
  Global ID of an existing label.
  """
  labelId: LabelID

  """
  Global ID of the issue board to mutate.
  """
  boardId: BoardID!
}

"""
Autogenerated return type of BoardListCreate.
"""
type BoardListCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue list in the issue board.
  """
  list: BoardList
}

"""
An edge in a connection.
"""
type BoardListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BoardList
}

"""
Autogenerated input type of CatalogResourcesCreate
"""
input CatalogResourcesCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project path belonging to the catalog resource.
  """
  projectPath: ID!
}

"""
Autogenerated return type of CatalogResourcesCreate.
"""
type CatalogResourcesCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CatalogResourcesDestroy
"""
input CatalogResourcesDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project path belonging to the catalog resource.
  """
  projectPath: ID!
}

"""
Autogenerated return type of CatalogResourcesDestroy.
"""
type CatalogResourcesDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Color represented as a hex code or named color.

For example: "#fefefe".
"""
scalar Color

"""
Conan file types
"""
enum ConanMetadatumFileTypeEnum {
  """
  A recipe file type.
  """
  RECIPE_FILE

  """
  A package file type.
  """
  PACKAGE_FILE
}

"""
Autogenerated input type of ConfigureSecretDetection
"""
input ConfigureSecretDetectionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project.
  """
  projectPath: ID!
}

"""
Autogenerated return type of ConfigureSecretDetection.
"""
type ConfigureSecretDetectionPayload {
  """
  Branch that has the new/modified `.gitlab-ci.yml` file.
  """
  branch: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Redirect path to use when the response is successful.
  """
  successPath: String
}

"""
Connection details for an Agent
"""
type ConnectedAgent {
  """
  When the connection was established.
  """
  connectedAt: Time

  """
  ID of the connection.
  """
  connectionId: BigInt

  """
  Information about the Agent.
  """
  metadata: AgentMetadata
}

"""
The connection type for ConnectedAgent.
"""
type ConnectedAgentConnection {
  """
  A list of edges.
  """
  edges: [ConnectedAgentEdge]

  """
  A list of nodes.
  """
  nodes: [ConnectedAgent]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ConnectedAgentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ConnectedAgent
}

"""
Autogenerated input type of CreateBoard
"""
input CreateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Board name.
  """
  name: String

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean
}

"""
Autogenerated return type of CreateBoard.
"""
type CreateBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of CreateCustomEmoji
"""
input CreateCustomEmojiInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Namespace full path the emoji is associated with.
  """
  groupPath: ID!

  """
  Name of the emoji.
  """
  name: String!

  """
  Location of the emoji file.
  """
  url: String!
}

"""
Autogenerated input type of CreateDiscussion
"""
input CreateDiscussionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the resource to add a note to.
  """
  noteableId: NoteableID!

  """
  Content of the note.
  """
  body: String!

  """
  Internal flag for a note. Default is false.
  """
  internal: Boolean
}

"""
Autogenerated return type of CreateDiscussion.
"""
type CreateDiscussionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of CreateNote
"""
input CreateNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the resource to add a note to.
  """
  noteableId: NoteableID!

  """
  Content of the note.
  """
  body: String!

  """
  Internal flag for a note. Default is false.
  """
  internal: Boolean

  """
  Global ID of the discussion the note is in reply to.
  """
  discussionId: DiscussionID

  """
  SHA of the head commit which is used to ensure that the merge request has not been updated since the request was sent.
  """
  mergeRequestDiffHeadSha: String
}

"""
Autogenerated return type of CreateNote.
"""
type CreateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of CreateSnippet
"""
input CreateSnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Title of the snippet.
  """
  title: String!

  """
  Description of the snippet.
  """
  description: String

  """
  Visibility level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum!

  """
  Full path of the project the snippet is associated with.
  """
  projectPath: ID

  """
  Paths to files uploaded in the snippet description.
  """
  uploadedFiles: [String!]

  """
  Actions to perform over the snippet repository and blobs.
  """
  blobActions: [SnippetBlobActionInputType!]
}

"""
Autogenerated return type of CreateSnippet.
"""
type CreateSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

"""
The currently authenticated GitLab user.
"""
type CurrentUser implements User {
  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
Date represented in ISO 8601
"""
scalar Date

"""
Autogenerated input type of DeleteAnnotation
"""
input DeleteAnnotationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the annotation to delete.
  """
  id: String!
}

"""
Autogenerated return type of DeleteAnnotation.
"""
type DeleteAnnotationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
The response from the AdminSidekiqQueuesDeleteJobs mutation
"""
type DeleteJobsResponse {
  """
  Whether or not the entire queue was processed in time; if not, retrying the same request is safe.
  """
  completed: Boolean

  """
  Number of matching jobs deleted.
  """
  deletedJobs: Int

  """
  Queue size after processing.
  """
  queueSize: Int
}

type DeletedNote {
  """
  ID of the discussion for the deleted note.
  """
  discussionId: DiscussionID

  """
  ID of the deleted note.
  """
  id: NoteID!

  """
  Whether deleted note is the last note in the discussion.
  """
  lastDiscussionNote: Boolean
}

"""
Dependency proxy blob
"""
type DependencyProxyBlob {
  """
  Date of creation.
  """
  createdAt: Time!

  """
  Name of the blob.
  """
  fileName: String!

  """
  Size of the blob file.
  """
  size: String!

  """
  Date of most recent update.
  """
  updatedAt: Time!
}

"""
The connection type for DependencyProxyBlob.
"""
type DependencyProxyBlobConnection {
  """
  A list of edges.
  """
  edges: [DependencyProxyBlobEdge]

  """
  A list of nodes.
  """
  nodes: [DependencyProxyBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DependencyProxyBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DependencyProxyBlob
}

"""
Autogenerated input type of DestroyBoard
"""
input DestroyBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the board to destroy.
  """
  id: BoardID!
}

"""
Autogenerated input type of DestroyBoardList
"""
input DestroyBoardListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the list to destroy. Only label lists are accepted.
  """
  listId: ListID!
}

"""
Autogenerated return type of DestroyBoardList.
"""
type DestroyBoardListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  List after mutation.
  """
  list: BoardList
}

"""
Autogenerated return type of DestroyBoard.
"""
type DestroyBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated return type of DestroyContainerRepositoryTags.
"""
type DestroyContainerRepositoryTagsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Deleted container repository tags.
  """
  deletedTagNames: [String!]!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroyNote
"""
input DestroyNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the note to destroy.
  """
  id: NoteID!
}

"""
Autogenerated return type of DestroyNote.
"""
type DestroyNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated return type of DestroyPackageFile.
"""
type DestroyPackageFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated return type of DestroyPackageFiles.
"""
type DestroyPackageFilesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated return type of DestroyPackage.
"""
type DestroyPackagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated return type of DestroyPackages.
"""
type DestroyPackagesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of DestroySnippet
"""
input DestroySnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the snippet to destroy.
  """
  id: SnippetID!
}

"""
Autogenerated return type of DestroySnippet.
"""
type DestroySnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

"""
Details of the import status of a project.
"""
type DetailedImportStatus {
  """
  ID of the import state.
  """
  id: ProjectImportStateID

  """
  Last error of the import.
  """
  lastError: String

  """
  Time of the last successful update.
  """
  lastSuccessfulUpdateAt: Time

  """
  Time of the last update.
  """
  lastUpdateAt: Time

  """
  Time of the start of the last update.
  """
  lastUpdateStartedAt: Time

  """
  Current status of the import.
  """
  status: String

  """
  Import url.
  """
  url: String
}

"""
Detailed representation of whether a GitLab merge request can be merged.
"""
enum DetailedMergeStatus {
  """
  Merge status has not been checked.
  """
  UNCHECKED

  """
  Currently checking for mergeability.
  """
  CHECKING

  """
  Branch can be merged.
  """
  MERGEABLE

  """
  Source branch exists and contains commits.
  """
  COMMITS_STATUS

  """
  Pipeline must succeed before merging.
  """
  CI_MUST_PASS

  """
  Pipeline is still running.
  """
  CI_STILL_RUNNING

  """
  Discussions must be resolved before merging.
  """
  DISCUSSIONS_NOT_RESOLVED

  """
  Merge request must not be draft before merging.
  """
  DRAFT_STATUS

  """
  Merge request must be open before merging.
  """
  NOT_OPEN

  """
  Merge request must be approved before merging.
  """
  NOT_APPROVED

  """
  Merge request dependencies must be merged.
  """
  BLOCKED_STATUS

  """
  Status checks must pass.
  """
  EXTERNAL_STATUS_CHECKS

  """
  Merge request diff is being created.
  """
  PREPARING

  """
  Either the title or description must reference a Jira issue.
  """
  JIRA_ASSOCIATION

  """
  There are conflicts between the source and target branches.
  """
  CONFLICT

  """
  Merge request needs to be rebased.
  """
  NEED_REBASE

  """
  Merge request approvals currently syncing.
  """
  APPROVALS_SYNCING
}

type DetailedStatus {
  """
  Action information for the status. This includes method, button title, icon, path, and title.
  """
  action: StatusAction

  """
  Path of the details for the status.
  """
  detailsPath: String

  """
  Favicon of the status.
  """
  favicon: String

  """
  Group of the status. Deprecated in GitLab 16.4: The `group` attribute is deprecated. Use `name` instead.
  """
  group: String
  @deprecated(
    reason: "The `group` attribute is deprecated. Use `name` instead. Deprecated in GitLab 16.4."
  )

  """
  Indicates if the status has further details.
  """
  hasDetails: Boolean

  """
  Icon of the status. Deprecated in GitLab 16.4: The `icon` attribute is deprecated. Use `name` to identify the status to display instead.
  """
  icon: String
  @deprecated(
    reason: "The `icon` attribute is deprecated. Use `name` to identify the status to display instead. Deprecated in GitLab 16.4."
  )

  """
  ID for a detailed status.
  """
  id: String!

  """
  Human-readable label of the status (e.g. success).
  """
  label: String

  """
  Machine-readable status name (e.g. SUCCESS).
  """
  name: String

  """
  Text of the status. Deprecated in GitLab 16.4: The `text` attribute is being deprecated. Use `label` instead.
  """
  text: String
  @deprecated(
    reason: "The `text` attribute is being deprecated. Use `label` instead. Deprecated in GitLab 16.4."
  )

  """
  Tooltip associated with the status.
  """
  tooltip: String
}

type Discussion implements ResolvableInterface {
  """
  Timestamp of the discussion's creation.
  """
  createdAt: Time!

  """
  ID of this discussion.
  """
  id: DiscussionID!

  """
  Object which the discussion belongs to.
  """
  noteable: NoteableType

  """
  All notes in the discussion.
  """
  notes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  ID used to reply to this discussion.
  """
  replyId: DiscussionID!

  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore
}

"""
The connection type for Discussion.
"""
type DiscussionConnection {
  """
  A list of edges.
  """
  edges: [DiscussionEdge]

  """
  A list of nodes.
  """
  nodes: [Discussion]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DiscussionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Discussion
}

"""
A `DiscussionID` is a global ID. It is encoded as a string.

An example `DiscussionID` is: `"gid://gitlab/Discussion/1"`.
"""
scalar DiscussionID

"""
Autogenerated input type of DiscussionToggleResolve
"""
input DiscussionToggleResolveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the discussion.
  """
  id: DiscussionID!

  """
  Will resolve the discussion when true, and unresolve the discussion when false.
  """
  resolve: Boolean!
}

"""
Autogenerated return type of DiscussionToggleResolve.
"""
type DiscussionToggleResolvePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Discussion after mutation.
  """
  discussion: Discussion

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Duration between two instants, represented as a fractional number of seconds.

For example: 12.3334
"""
scalar Duration

"""
Autogenerated input type of EchoCreate
"""
input EchoCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors to return to the user.
  """
  errors: [String!]

  """
  Messages to return to the user.
  """
  messages: [String!]
}

"""
Autogenerated return type of EchoCreate.
"""
type EchoCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Messages returned to the user.
  """
  echoes: [String!]

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type EgressNode {
  """
  Artifacts egress for that project in that period of time.
  """
  artifactsEgress: BigInt!

  """
  First day of the node range. There is one node per month.
  """
  date: String!

  """
  Packages egress for that project in that period of time.
  """
  packagesEgress: BigInt!

  """
  Registry egress for that project in that period of time.
  """
  registryEgress: BigInt!

  """
  Repository egress for that project in that period of time.
  """
  repositoryEgress: BigInt!

  """
  Total egress for that project in that period of time.
  """
  totalEgress: BigInt!
}

"""
The connection type for EgressNode.
"""
type EgressNodeConnection {
  """
  A list of edges.
  """
  edges: [EgressNodeEdge]

  """
  A list of nodes.
  """
  nodes: [EgressNode]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EgressNodeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EgressNode
}

type Email {
  """
  Timestamp the email was confirmed.
  """
  confirmedAt: Time

  """
  Timestamp the email was created.
  """
  createdAt: Time!

  """
  Email address.
  """
  email: String!

  """
  Internal ID of the email.
  """
  id: ID!

  """
  Timestamp the email was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for Email.
"""
type EmailConnection {
  """
  A list of edges.
  """
  edges: [EmailEdge]

  """
  A list of nodes.
  """
  nodes: [Email]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EmailEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Email
}

"""
A `EmailID` is a global ID. It is encoded as a string.

An example `EmailID` is: `"gid://gitlab/Email/1"`.
"""
scalar EmailID

interface Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!
}

"""
Type of a tree entry
"""
enum EntryType {
  """
  Directory tree type.
  """
  tree

  """
  File tree type.
  """
  blob

  """
  Commit tree type.
  """
  commit
}

"""
Values for status of the Web IDE Extension Marketplace opt-in for the user
"""
enum ExtensionsMarketplaceOptInStatus {
  """
  Web IDE Extension Marketplace opt-in status: UNSET.
  """
  UNSET

  """
  Web IDE Extension Marketplace opt-in status: ENABLED.
  """
  ENABLED

  """
  Web IDE Extension Marketplace opt-in status: DISABLED.
  """
  DISABLED
}

type FileUpload {
  """
  Global ID of the upload.
  """
  id: UploadID!

  """
  Path of the upload.
  """
  path: String!

  """
  Size of the upload in bytes.
  """
  size: Int!
}

"""
Details of the fork project compared to its upstream project.
"""
type ForkDetails {
  """
  Number of commits ahead of upstream.
  """
  ahead: Int

  """
  Number of commits behind upstream.
  """
  behind: Int

  """
  Indicates if the fork conflicts with its upstream project.
  """
  hasConflicts: Boolean

  """
  Indicates if there is a synchronization in progress.
  """
  isSyncing: Boolean
}

"""
A `GitlabErrorTrackingDetailedErrorID` is a global ID. It is encoded as a string.

An example `GitlabErrorTrackingDetailedErrorID` is: `"gid://gitlab/Gitlab::ErrorTracking::DetailedError/1"`.
"""
scalar GitlabErrorTrackingDetailedErrorID

"""
A global identifier.

A global identifier represents an object uniquely across the application.
An example of a global identifier is `"gid://gitlab/User/1"`.

`gid://gitlab` stands for the root name.
`User` is the name of the ActiveRecord class of the record.
`1` is the record id as per the id in the db table.

Global identifiers are encoded as strings.
"""
scalar GlobalID

type Group {
  """
  Path for the namespace's achievements. Returns `null` if the namespace is not a group, or the `achievements` feature flag is disabled. Introduced in GitLab 17.0: **Status**: Experiment.
  """
  achievementsPath: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.0.")

  """
  Indicates whether Auto DevOps is enabled for all projects within this group.
  """
  autoDevopsEnabled: Boolean

  """
  Search users for autocompletion
  """
  autocompleteUsers(
    """
    Query to search users by name, username, or public email.
    """
    search: String
  ): [AutocompletedUser!]

  """
  Avatar URL of the group.
  """
  avatarUrl: String

  """
  A single board of the group.
  """
  board(
    """
    ID of the board.
    """
    id: BoardID!
  ): Board

  """
  Boards of the group.
  """
  boards(
    """
    Find a board by its ID.
    """
    id: BoardID

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  Number of container repositories in the group.
  """
  containerRepositoriesCount: Int!

  """
  Timestamp of the group creation.
  """
  createdAt: Time

  """
  Indicates if the cross_project_pipeline feature is available for the namespace.
  """
  crossProjectPipelineAvailable: Boolean!

  """
  Data transfer data point for a specific period. This is mocked data under a development feature flag.
  """
  dataTransfer(
    """
    Retain egress data for one year. Data for the current month will increase dynamically as egress occurs.
    """
    from: Date

    """
    End date for the data.
    """
    to: Date
  ): GroupDataTransfer

  """
  Number of dependency proxy blobs cached in the group.
  """
  dependencyProxyBlobCount: Int!

  """
  Dependency Proxy blobs.
  """
  dependencyProxyBlobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DependencyProxyBlobConnection

  """
  Number of dependency proxy images cached in the group.
  """
  dependencyProxyImageCount: Int!

  """
  Prefix for pulling images when using the dependency proxy.
  """
  dependencyProxyImagePrefix: String!

  """
  Total size of the dependency proxy cached images.
  """
  dependencyProxyTotalSize: String!

  """
  Total size of the dependency proxy cached images in bytes, encoded as a string.
  """
  dependencyProxyTotalSizeBytes: BigInt!

  """
  Total size of the dependency proxy cached images in bytes. Deprecated in GitLab 16.1: Use `dependencyProxyTotalSizeBytes`.
  """
  dependencyProxyTotalSizeInBytes: Int!
  @deprecated(
    reason: "Use `dependencyProxyTotalSizeBytes`. Deprecated in GitLab 16.1."
  )

  """
  List of descendant groups of this group.
  """
  descendantGroups(
    """
    List of descendant groups of the parent group.
    """
    includeParentDescendants: Boolean = true

    """
    Limit result to groups owned by authenticated user.
    """
    owned: Boolean

    """
    Search query for group name or group full path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  Count of direct descendant groups of this group.
  """
  descendantGroupsCount: Int!

  """
  Description of the namespace.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Indicates if a group has email notifications disabled.
  """
  emailsDisabled: Boolean

  """
  Indicates if a group has email notifications enabled.
  """
  emailsEnabled: Boolean

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  A membership of a user within this group.
  """
  groupMembers(
    """
    Search query.
    """
    search: String

    """
    sort query.
    """
    sort: MemberSort

    """
    Filter members by the given member relations.
    """
    relations: [GroupMemberRelation!] = [DIRECT, INHERITED]

    """
    Filter members by the given access levels.
    """
    accessLevels: [AccessLevelEnum!]

    """
    Filter members by enterprise users.
    """
    enterprise: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Count of direct members of this group.
  """
  groupMembersCount: Int!

  """
  ID of the namespace.
  """
  id: ID!

  """
  Issues for projects in this group.
  """
  issues(
    """
    Search query for title or description.
    """
    search: String

    """
    Specify the fields to perform the search in.
    Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.'
    """
    in: [IssuableSearchableField!]

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after the date.
    """
    closedAfter: Time

    """
    Issues closed before the date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after the date.
    """
    createdAfter: Time

    """
    Issues created before the date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to the issue.
    """
    labelName: [String]

    """
    Milestone applied to the issue.
    """
    milestoneTitle: [String]

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    List of arguments with inclusive OR.
    """
    or: UnionedIssueFilterInput

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after the date.
    """
    updatedAfter: Time

    """
    Issues updated before the date.
    """
    updatedBefore: Time

    """
    Sort issues by the criteria.
    """
    sort: IssueSort = created_desc

    """
    Current state of the issue.
    """
    state: IssuableState

    """
    Include issues belonging to subgroups
    """
    includeSubgroups: Boolean = false

    """
    Return issues from archived projects
    """
    includeArchived: Boolean = false

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection

  """
  Label available on this group.
  """
  label(
    """
    Title of the label.
    """
    title: String!
  ): Label

  """
  Labels available on this group.
  """
  labels(
    """
    Search term to find labels with.
    """
    searchTerm: String

    """
    Specify which fields to search in.
    """
    searchIn: [LabelSearchFieldList!]! = [TITLE, DESCRIPTION]

    """
    Include labels from ancestor groups.
    """
    includeAncestorGroups: Boolean = false

    """
    Include labels from descendant groups.
    """
    includeDescendantGroups: Boolean = false

    """
    Include only group level labels.
    """
    onlyGroupLabels: Boolean = false

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Indicates if Large File Storage (LFS) is enabled for namespace.
  """
  lfsEnabled: Boolean

  """
  Indicates if math rendering limits are locked for all descendant groups.
  """
  lockMathRenderingLimitsEnabled: Boolean

  """
  Indicates if math rendering limits are used for this group.
  """
  mathRenderingLimitsEnabled: Boolean

  """
  The maximum access level of the current user in the group.
  """
  maxAccessLevel: AccessLevel!

  """
  Indicates if a group is disabled from getting mentioned.
  """
  mentionsDisabled: Boolean

  """
  Merge requests for projects in this group.
  """
  mergeRequests(
    """
    Search query for title or description.
    """
    search: String

    """
    Specify the fields to perform the search in.
    Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.'
    """
    in: [IssuableSearchableField!]

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Array of source branch names.
    All resolved merge requests will have one of these branches as their source.
    """
    sourceBranches: [String!]

    """
    Array of target branch names.
    All resolved merge requests will have one of these branches as their target.
    """
    targetBranches: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    Title of the milestone. Incompatible with milestoneWildcardId.
    """
    milestoneTitle: String

    """
    Include merge requests belonging to subgroups
    """
    includeSubgroups: Boolean = false

    """
    Return merge requests from archived projects
    """
    includeArchived: Boolean = false

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author.
    """
    authorUsername: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Name of the namespace.
  """
  name: String!

  """
  Path for editing group at the organization level. Introduced in GitLab 17.1: **Status**: Experiment.
  """
  organizationEditPath: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.1.")

  """
  Parent group.
  """
  parent: Group

  """
  Path of the namespace.
  """
  path: String!

  """
  Permission level required to create projects in the group.
  """
  projectCreationLevel: String

  """
  Projects within this namespace.
  """
  projects(
    """
    Include also subgroup projects.
    """
    includeSubgroups: Boolean = false

    """
    Include also archived projects.
    """
    includeArchived: Boolean = true

    """
    Include projects that are not aimed for deletion.
    """
    notAimedForDeletion: Boolean = false

    """
    Search project with most similar names or paths.
    """
    search: String = null

    """
    Sort projects by the criteria.
    """
    sort: NamespaceProjectSort = null

    """
    Filter projects by IDs.
    """
    ids: [ID!] = null

    """
    Return only projects with issues enabled.
    """
    withIssuesEnabled: Boolean

    """
    Return only projects with merge requests enabled.
    """
    withMergeRequestsEnabled: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Count of direct projects in this group.
  """
  projectsCount: Int!

  """
  List of recently visited boards of the group. Maximum size is 4.
  """
  recentIssueBoards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  Indicates if users can request access to namespace.
  """
  requestAccessEnabled: Boolean

  """
  Indicates if all users in this group are required to set up two-factor authentication.
  """
  requireTwoFactorAuthentication: Boolean

  """
  Aggregated storage statistics of the namespace. Only available for root namespaces.
  """
  rootStorageStatistics: RootStorageStatistics

  """
  Indicates if sharing a project with another group within this group is prevented.
  """
  shareWithGroupLock: Boolean

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting

  """
  Permission level required to create subgroups within the group.
  """
  subgroupCreationLevel: String

  """
  Timelog categories for the namespace. Introduced in GitLab 15.3: **Status**: Experiment.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.3.")

  """
  Time logged on issues and merge requests in the group and its subgroups.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection!

  """
  Time before two-factor authentication is enforced.
  """
  twoFactorGracePeriod: Int

  """
  Timestamp of when the group was last updated.
  """
  updatedAt: Time

  """
  Permissions for the current user on the resource
  """
  userPermissions: GroupPermissions!

  """
  Visibility of the namespace.
  """
  visibility: String

  """
  Web URL of the group.
  """
  webUrl: String!

  """
  Find a work item by IID directly associated with the group. Returns `null` if the `namespace_level_work_items` feature flag is disabled. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  workItem(
    """
    IID of the work item.
    """
    iid: String!
  ): WorkItem
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Counts of work items by state for the namespace. Returns `null` if the `namespace_level_work_items` feature flag is disabled. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  workItemStateCounts(
    """
    Search query for title or description.
    """
    search: String

    """
    List of IIDs of work items. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Current state of the work item.
    """
    state: IssuableState

    """
    Filter work items by the given work item types.
    """
    types: [IssueType!]

    """
    IID of the work item. For example, "1".
    """
    iid: String

    """
    Sort work items by criteria.
    """
    sort: WorkItemSort = created_desc

    """
    Include work items from ancestor groups.
    """
    includeAncestors: Boolean = false

    """
    Include work items from descendant groups and projects.
    """
    includeDescendants: Boolean = false
  ): WorkItemStateCountsType
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  Work item types available to the group.
  """
  workItemTypes(
    """
    Filter work item types by the given name.
    """
    name: IssueType

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemTypeConnection

  """
  Work items that belong to the namespace. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  workItems(
    """
    Search query for title or description.
    """
    search: String

    """
    List of IIDs of work items. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Current state of the work item.
    """
    state: IssuableState

    """
    Filter work items by the given work item types.
    """
    types: [IssueType!]

    """
    IID of the work item. For example, "1".
    """
    iid: String

    """
    Sort work items by criteria.
    """
    sort: WorkItemSort = created_desc

    """
    Include work items from ancestor groups.
    """
    includeAncestors: Boolean = false

    """
    Include work items from descendant groups and projects.
    """
    includeDescendants: Boolean = false

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")
}

"""
The connection type for Group.
"""
type GroupConnection {
  """
  A list of edges.
  """
  edges: [GroupEdge]

  """
  A list of nodes.
  """
  nodes: [Group]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type GroupDataTransfer {
  """
  Data nodes.
  """
  egressNodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EgressNodeConnection
}

"""
An edge in a connection.
"""
type GroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Group
}

"""
A `GroupID` is a global ID. It is encoded as a string.

An example `GroupID` is: `"gid://gitlab/Group/1"`.
"""
scalar GroupID

"""
Represents a Group Membership
"""
type GroupMember implements MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  Group that a user is a member of.
  """
  group: Group

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Group notification email for user. Only available for admins.
  """
  notificationEmail: String

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore

  """
  Permissions for the current user on the resource
  """
  userPermissions: GroupPermissions!
}

"""
Autogenerated input type of GroupMemberBulkUpdate
"""
input GroupMemberBulkUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global IDs of the members.
  """
  userIds: [UserID!]!

  """
  Access level to update the members to.
  """
  accessLevel: MemberAccessLevel!

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  Global ID of the group.
  """
  groupId: GroupID!
}

"""
Autogenerated return type of GroupMemberBulkUpdate.
"""
type GroupMemberBulkUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Group members after mutation.
  """
  groupMembers: [GroupMember!]
}

"""
The connection type for GroupMember.
"""
type GroupMemberConnection {
  """
  A list of edges.
  """
  edges: [GroupMemberEdge]

  """
  A list of nodes.
  """
  nodes: [GroupMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GroupMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GroupMember
}

"""
Group member relation
"""
enum GroupMemberRelation {
  """
  Members in the group itself.
  """
  DIRECT

  """
  Members in the group's ancestor groups.
  """
  INHERITED

  """
  Members in the group's subgroups.
  """
  DESCENDANTS

  """
  Invited group's members.
  """
  SHARED_FROM_GROUPS
}

"""
User permission on groups
"""
enum GroupPermission {
  """
  Groups where the user can create projects.
  """
  CREATE_PROJECTS

  """
  Groups where the user can transfer projects to.
  """
  TRANSFER_PROJECTS

  """
  Groups where the user can import projects to.
  """
  IMPORT_PROJECTS
}

type GroupPermissions {
  """
  If `true`, the user can perform `create_custom_emoji` on this resource
  """
  createCustomEmoji: Boolean!

  """
  If `true`, the user can perform `create_projects` on this resource
  """
  createProjects: Boolean!

  """
  If `true`, the user can perform `read_group` on this resource
  """
  readGroup: Boolean!

  """
  If `true`, the user can perform `remove_group` on this resource
  """
  removeGroup: Boolean!

  """
  If `true`, the user can perform `view_edit_page` on this resource
  """
  viewEditPage: Boolean!
}

"""
Values for sorting releases belonging to a group
"""
enum GroupReleaseSort {
  """
  Released at by descending order.
  """
  RELEASED_AT_DESC

  """
  Released at by ascending order.
  """
  RELEASED_AT_ASC
}

"""
Autogenerated input type of GroupUpdate
"""
input GroupUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the group that will be updated.
  """
  fullPath: ID!

  """
  Indicates if math rendering limits are locked for all descendant groups.
  """
  lockMathRenderingLimitsEnabled: Boolean

  """
  Indicates if math rendering limits are used for this group.
  """
  mathRenderingLimitsEnabled: Boolean

  """
  Name of the namespace.
  """
  name: String

  """
  Path of the namespace.
  """
  path: String

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting

  """
  Visibility of the namespace.
  """
  visibility: VisibilityLevelsEnum
}

"""
Autogenerated return type of GroupUpdate.
"""
type GroupUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Group after update.
  """
  group: Group
}

type Groups {

  """
  Starting line number for the commit group.
  """
  lineno: Int!

  """
  Array of lines added for the commit group.
  """
  lines: [String!]!

  """
  Number of contiguous lines which the blame spans for the commit group.
  """
  span: Int!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
IDE settings and feature flags.
"""
type Ide {
  """
  Indicates whether AI assisted code suggestions are enabled.
  """
  codeSuggestionsEnabled: Boolean!
}

"""
Import source
"""
enum ImportSource {
  """
  Not imported
  """
  NONE

  """
  Imported from Gitlab Migration.
  """
  GITLAB_MIGRATION

  """
  Imported from Gitlab Project.
  """
  GITLAB_PROJECT

  """
  Imported from Gitlab Group.
  """
  GITLAB_GROUP

  """
  Imported from Github.
  """
  GITHUB

  """
  Imported from Bitbucket.
  """
  BITBUCKET

  """
  Imported from Bitbucket Server.
  """
  BITBUCKET_SERVER

  """
  Imported from Fogbugz.
  """
  FOGBUGZ

  """
  Imported from Gitea.
  """
  GITEA

  """
  Imported from Git.
  """
  GIT

  """
  Imported from Manifest.
  """
  MANIFEST

  """
  Imported from Custom Template.
  """
  CUSTOM_TEMPLATE
}

"""
A `IncidentManagementTimelineEventID` is a global ID. It is encoded as a string.

An example `IncidentManagementTimelineEventID` is: `"gid://gitlab/IncidentManagement::TimelineEvent/1"`.
"""
scalar IncidentManagementTimelineEventID

"""
A `IncidentManagementTimelineEventTagID` is a global ID. It is encoded as a string.

An example `IncidentManagementTimelineEventTagID` is: `"gid://gitlab/IncidentManagement::TimelineEventTag/1"`.
"""
scalar IncidentManagementTimelineEventTagID

"""
Represents an issuable.
"""
union Issuable = Issue | MergeRequest | WorkItem

"""
A `IssuableID` is a global ID. It is encoded as a string.

An example `IssuableID` is: `"gid://gitlab/Issuable/1"`.
"""
scalar IssuableID

"""
Fields to perform the search in
"""
enum IssuableSearchableField {
  """
  Search in title field.
  """
  TITLE

  """
  Search in description field.
  """
  DESCRIPTION
}

"""
Incident severity
"""
enum IssuableSeverity {
  """
  Unknown severity
  """
  UNKNOWN

  """
  Low severity
  """
  LOW

  """
  Medium severity
  """
  MEDIUM

  """
  High severity
  """
  HIGH

  """
  Critical severity
  """
  CRITICAL
}

"""
State of a GitLab issue or merge request
"""
enum IssuableState {
  """
  In open state.
  """
  opened

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  All available.
  """
  all
}

"""
Values for subscribing and unsubscribing from issuables
"""
enum IssuableSubscriptionEvent {
  """
  Subscribe to an issuable.
  """
  SUBSCRIBE

  """
  Unsubscribe from an issuable.
  """
  UNSUBSCRIBE
}

type Issue implements NoteableInterface & Todoable {
  """
  Assignees of the issue.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  User that created the issue.
  """
  author: UserCore!

  """
  Issue this issue was closed as a duplicate of.
  """
  closedAsDuplicateOf: Issue

  """
  Timestamp of when the issue was closed.
  """
  closedAt: Time

  """
  All commenters on this noteable.
  """
  commenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection!

  """
  Indicates the issue is confidential.
  """
  confidential: Boolean!

  """
  User specific email address for the issue.
  """
  createNoteEmail: String

  """
  Timestamp of when the issue was created.
  """
  createdAt: Time!

  """
  Description of the issue.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Indicates discussion is locked on the issue.
  """
  discussionLocked: Boolean!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  Number of downvotes the issue has received.
  """
  downvotes: Int!

  """
  Due date of the issue.
  """
  dueDate: Time

  """
  Indicates if the parent project or group has email notifications disabled: `true` if email notifications are disabled. Deprecated in GitLab 16.3: Use `emails_enabled`.
  """
  emailsDisabled: Boolean!
  @deprecated(reason: "Use `emails_enabled`. Deprecated in GitLab 16.3.")

  """
  Indicates if the parent project or group has email notifications disabled: `false` if email notifications are disabled.
  """
  emailsEnabled: Boolean!

  """
  Escalation status of the issue.
  """
  escalationStatus: IssueEscalationStatus

  """
  Email address of non-GitLab user reporting the issue. For guests, the email address is obfuscated.
  """
  externalAuthor: String

  """
  Indicates the issue is hidden because the author has been banned.
  """
  hidden: Boolean

  """
  Human-readable time estimate of the issue.
  """
  humanTimeEstimate: String

  """
  Human-readable total time reported as spent on the issue.
  """
  humanTotalTimeSpent: String

  """
  ID of the issue.
  """
  id: ID!

  """
  Internal ID of the issue.
  """
  iid: String!

  """
  Labels of the issue.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Number of merge requests that close the issue on merge.
  """
  mergeRequestsCount: Int!

  """
  Indicates if issue got moved from other project.
  """
  moved: Boolean

  """
  Updated Issue after it got moved to another project.
  """
  movedTo: Issue

  """
  All notes on this noteable.
  """
  notes(
    """
    Type of notes collection: ALL_NOTES, ONLY_COMMENTS, ONLY_ACTIVITY.
    """
    filter: NotesFilterType = ALL_NOTES

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  List of participants in the issue.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  ID of the issue project.
  """
  projectId: Int

  """
  Internal reference of the issue. Returned in shortened format by default.
  """
  reference(
    """
    Boolean option specifying whether the reference should be returned in full.
    """
    full: Boolean = false
  ): String!

  """
  Merge requests related to the issue. This field can only be resolved for one issue in any single request.
  """
  relatedMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Relative position of the issue (used for positioning in epic tree and issue boards).
  """
  relativePosition: Int

  """
  Severity level of the incident.
  """
  severity: IssuableSeverity

  """
  State of the issue.
  """
  state: IssueState!

  """
  Indicates the currently logged in user is subscribed to the issue.
  """
  subscribed: Boolean!

  """
  Task completion status of the issue.
  """
  taskCompletionStatus: TaskCompletionStatus!

  """
  Time estimate of the issue.
  """
  timeEstimate: Int!

  """
  Timelogs on the issue.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection!

  """
  Title of the issue.
  """
  title: String!

  """
  GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Total time (in seconds) reported as spent on the issue.
  """
  totalTimeSpent: Int!

  """
  Type of the issue.
  """
  type: IssueType

  """
  Timestamp of when the issue was last updated.
  """
  updatedAt: Time!

  """
  User that last updated the issue.
  """
  updatedBy: UserCore

  """
  Number of upvotes the issue has received.
  """
  upvotes: Int!

  """
  Number of user discussions in the issue.
  """
  userDiscussionsCount: Int!

  """
  Number of user notes of the issue.
  """
  userNotesCount: Int!

  """
  Permissions for the current user on the resource
  """
  userPermissions: IssuePermissions!

  """
  Web path of the issue.
  """
  webPath: String!

  """
  Web URL of the issue.
  """
  webUrl: String!
}

"""
The connection type for Issue.
"""
type IssueConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [IssueEdge]

  """
  A list of nodes.
  """
  nodes: [Issue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type IssueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Issue
}

"""
Issue escalation status values
"""
enum IssueEscalationStatus {
  """
  Investigation has not started.
  """
  TRIGGERED

  """
  Someone is actively investigating the problem.
  """
  ACKNOWLEDGED

  """
  The problem has been addressed.
  """
  RESOLVED

  """
  No action will be taken.
  """
  IGNORED
}

"""
A `IssueID` is a global ID. It is encoded as a string.

An example `IssueID` is: `"gid://gitlab/Issue/1"`.
"""
scalar IssueID

"""
Autogenerated input type of IssueLinkAlerts
"""
input IssueLinkAlertsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Alerts references to be linked to the incident.
  """
  alertReferences: [String!]!
}

"""
Autogenerated return type of IssueLinkAlerts.
"""
type IssueLinkAlertsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueMove
"""
input IssueMoveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Project to move the issue to.
  """
  targetProjectPath: ID!
}

"""
Autogenerated input type of IssueMoveList
"""
input IssueMoveListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the board that the issue is in.
  """
  boardId: BoardID!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  ID of the board list that the issue will be moved from.
  """
  fromListId: ID

  """
  ID of the board list that the issue will be moved to.
  """
  toListId: ID

  """
  ID of issue that should be placed before the current issue.
  """
  moveBeforeId: ID

  """
  ID of issue that should be placed after the current issue.
  """
  moveAfterId: ID

  """
  Position of issue within the board list. Positions start at 0. Use -1 to move to the end of the list.
  """
  positionInList: Int
}

"""
Autogenerated return type of IssueMoveList.
"""
type IssueMoveListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated return type of IssueMove.
"""
type IssueMovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
A `IssueParentID` is a global ID. It is encoded as a string.

An example `IssueParentID` is: `"gid://gitlab/IssueParent/1"`.
"""
scalar IssueParentID

"""
Check permissions for the current user on a issue
"""
type IssuePermissions {
  """
  If `true`, the user can perform `admin_issue` on this resource
  """
  adminIssue: Boolean!

  """
  If `true`, the user can perform `admin_issue_relation` on this resource
  """
  adminIssueRelation: Boolean!

  """
  If `true`, the user can perform `create_design` on this resource
  """
  createDesign: Boolean!

  """
  If `true`, the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  If `true`, the user can perform `destroy_design` on this resource
  """
  destroyDesign: Boolean!

  """
  If `true`, the user can perform `read_design` on this resource
  """
  readDesign: Boolean!

  """
  If `true`, the user can perform `read_issue` on this resource
  """
  readIssue: Boolean!

  """
  If `true`, the user can perform `reopen_issue` on this resource
  """
  reopenIssue: Boolean!

  """
  If `true`, the user can perform `update_design` on this resource
  """
  updateDesign: Boolean!

  """
  If `true`, the user can perform `update_issue` on this resource
  """
  updateIssue: Boolean!
}

"""
Autogenerated input type of IssueSetAssignees
"""
input IssueSetAssigneesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Usernames to assign to the resource. Replaces existing assignees by default.
  """
  assigneeUsernames: [String!]!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode = REPLACE
}

"""
Autogenerated return type of IssueSetAssignees.
"""
type IssueSetAssigneesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetConfidential
"""
input IssueSetConfidentialInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Whether or not to set the issue as a confidential.
  """
  confidential: Boolean!
}

"""
Autogenerated return type of IssueSetConfidential.
"""
type IssueSetConfidentialPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated return type of IssueSetCrmContacts.
"""
type IssueSetCrmContactsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetDueDate
"""
input IssueSetDueDateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Desired due date for the issue. Due date is removed if null.
  """
  dueDate: Time
}

"""
Autogenerated return type of IssueSetDueDate.
"""
type IssueSetDueDatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetEscalationStatus
"""
input IssueSetEscalationStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Set the escalation status.
  """
  status: IssueEscalationStatus!
}

"""
Autogenerated return type of IssueSetEscalationStatus.
"""
type IssueSetEscalationStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetLocked
"""
input IssueSetLockedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Whether or not to lock discussion on the issue.
  """
  locked: Boolean!
}

"""
Autogenerated return type of IssueSetLocked.
"""
type IssueSetLockedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetSeverity
"""
input IssueSetSeverityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Set the incident severity level.
  """
  severity: IssuableSeverity!
}

"""
Autogenerated return type of IssueSetSeverity.
"""
type IssueSetSeverityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of IssueSetSubscription
"""
input IssueSetSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Desired state of the subscription.
  """
  subscribedState: Boolean!

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!
}

"""
Autogenerated return type of IssueSetSubscription.
"""
type IssueSetSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Values for sorting issues
"""
enum IssueSort {
  """
  Due date by ascending order.
  """
  DUE_DATE_ASC

  """
  Due date by descending order.
  """
  DUE_DATE_DESC

  """
  Relative position by ascending order.
  """
  RELATIVE_POSITION_ASC

  """
  Severity from less critical to more critical.
  """
  SEVERITY_ASC

  """
  Severity from more critical to less critical.
  """
  SEVERITY_DESC

  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Number of upvotes (awarded "thumbs up" emoji) by ascending order.
  """
  POPULARITY_ASC

  """
  Number of upvotes (awarded "thumbs up" emoji) by descending order.
  """
  POPULARITY_DESC

  """
  Status from triggered to resolved.
  """
  ESCALATION_STATUS_ASC

  """
  Status from resolved to triggered.
  """
  ESCALATION_STATUS_DESC

  """
  Closed time by ascending order.
  """
  CLOSED_AT_ASC

  """
  Closed time by descending order.
  """
  CLOSED_AT_DESC

  """
  Priority by ascending order.
  """
  PRIORITY_ASC

  """
  Priority by descending order.
  """
  PRIORITY_DESC

  """
  Label priority by ascending order.
  """
  LABEL_PRIORITY_ASC

  """
  Label priority by descending order.
  """
  LABEL_PRIORITY_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
State of a GitLab issue
"""
enum IssueState {
  """
  In open state.
  """
  opened

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  All available.
  """
  all
}

"""
Values for issue state events
"""
enum IssueStateEvent {
  """
  Reopens the issue.
  """
  REOPEN

  """
  Closes the issue.
  """
  CLOSE
}

"""
Represents total number of issues for the represented statuses
"""
type IssueStatusCountsType {
  """
  Number of issues with status ALL for the project
  """
  all: Int

  """
  Number of issues with status CLOSED for the project
  """
  closed: Int

  """
  Number of issues with status OPENED for the project
  """
  opened: Int
}

"""
Issue type
"""
enum IssueType {
  """
  Issue issue type
  """
  ISSUE

  """
  Incident issue type
  """
  INCIDENT

  """
  Test Case issue type
  """
  TEST_CASE

  """
  Requirement issue type
  """
  REQUIREMENT

  """
  Task issue type
  """
  TASK

  """
  Objective issue type. Available only when feature flag `okrs_mvc` is enabled. Introduced in GitLab 15.6: **Status**: Experiment.
  """
  OBJECTIVE
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.6.")

  """
  Key Result issue type. Available only when feature flag `okrs_mvc` is enabled. Introduced in GitLab 15.7: **Status**: Experiment.
  """
  KEY_RESULT
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.7.")

  """
  Epic issue type. Available only when feature flag `namespace_level_work_items` is enabled. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  EPIC @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")
}

"""
Autogenerated return type of IssuesBulkUpdate.
"""
type IssuesBulkUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Number of issues that were successfully updated.
  """
  updatedIssueCount: Int
}

"""
Represents untyped JSON
"""
scalar JSON

type Kas {
  """
  Indicates whether the Kubernetes agent server is enabled.
  """
  enabled: Boolean!

  """
  URL used by the agents to communicate with the server.
  """
  externalUrl: String

  """
  KAS version.
  """
  version: String
}

"""
Represents an SSH key.
"""
type Key {
  """
  Timestamp of when the key was created.
  """
  createdAt: Time!

  """
  Timestamp of when the key expires. It's null if it never expires.
  """
  expiresAt: Time!

  """
  ID of the key.
  """
  id: ID!

  """
  Public key of the key pair.
  """
  key: String!

  """
  Title of the key.
  """
  title: String!
}

type Label {
  """
  Background color of the label.
  """
  color: String!

  """
  When this label was created.
  """
  createdAt: Time!

  """
  Description of the label (Markdown rendered as HTML for caching).
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Label ID.
  """
  id: ID!

  """
  Indicates this label is locked for merge requests that have been merged.
  """
  lockOnMerge: Boolean!

  """
  Text color of the label.
  """
  textColor: String!

  """
  Content of the label.
  """
  title: String!

  """
  When this label was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for Label.
"""
type LabelConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [LabelEdge]

  """
  A list of nodes.
  """
  nodes: [Label]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of LabelCreate
"""
input LabelCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Title of the label.
  """
  title: String!

  """
  Description of the label.
  """
  description: String

  """
  The color of the label given in 6-digit hex notation with leading '#' sign
  (for example, `#FFAABB`) or one of the CSS color names.
  """
  color: String = "#6699cc"
}

"""
Autogenerated return type of LabelCreate.
"""
type LabelCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Label after mutation.
  """
  label: Label
}

"""
An edge in a connection.
"""
type LabelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Label
}

"""
A `LabelID` is a global ID. It is encoded as a string.

An example `LabelID` is: `"gid://gitlab/Label/1"`.
"""
scalar LabelID

"""
List of fields where the provided searchTerm should be looked up
"""
enum LabelSearchFieldList {
  """
  Search in the label title.
  """
  TITLE

  """
  Search in the label description.
  """
  DESCRIPTION
}

type LinkedWorkItemType {
  """
  Timestamp the link was created.
  """
  linkCreatedAt: Time!

  """
  Global ID of the link.
  """
  linkId: WorkItemsRelatedWorkItemLinkID!

  """
  Type of link.
  """
  linkType: String!

  """
  Timestamp the link was updated.
  """
  linkUpdatedAt: Time!

  """
  Linked work item.
  """
  workItem: WorkItem
}

"""
The connection type for LinkedWorkItemType.
"""
type LinkedWorkItemTypeConnection {
  """
  A list of edges.
  """
  edges: [LinkedWorkItemTypeEdge]

  """
  A list of nodes.
  """
  nodes: [LinkedWorkItemType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type LinkedWorkItemTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LinkedWorkItemType
}

"""
A `ListID` is a global ID. It is encoded as a string.

An example `ListID` is: `"gid://gitlab/List/1"`.
"""
scalar ListID

"""
Autogenerated input type of MarkAsSpamSnippet
"""
input MarkAsSpamSnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the snippet to update.
  """
  id: SnippetID!
}

"""
Autogenerated return type of MarkAsSpamSnippet.
"""
type MarkAsSpamSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

"""
Possible identifier types for a measurement
"""
enum MeasurementIdentifier {
  """
  Project count.
  """
  PROJECTS

  """
  User count.
  """
  USERS

  """
  Issue count.
  """
  ISSUES

  """
  Merge request count.
  """
  MERGE_REQUESTS

  """
  Group count.
  """
  GROUPS

  """
  Pipeline count.
  """
  PIPELINES

  """
  Pipeline count with success status.
  """
  PIPELINES_SUCCEEDED

  """
  Pipeline count with failed status.
  """
  PIPELINES_FAILED

  """
  Pipeline count with canceled status.
  """
  PIPELINES_CANCELED

  """
  Pipeline count with skipped status.
  """
  PIPELINES_SKIPPED
}

"""
Access level of a group or project member
"""
enum MemberAccessLevel {
  """
  Guest access.
  """
  GUEST

  """
  Reporter access.
  """
  REPORTER

  """
  Developer access.
  """
  DEVELOPER

  """
  Maintainer access.
  """
  MAINTAINER

  """
  Owner access.
  """
  OWNER
}

interface MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore
}

"""
The connection type for MemberInterface.
"""
type MemberInterfaceConnection {
  """
  A list of edges.
  """
  edges: [MemberInterfaceEdge]

  """
  A list of nodes.
  """
  nodes: [MemberInterface]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MemberInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MemberInterface
}

"""
Values for sorting members
"""
enum MemberSort {
  """
  Access level ascending order.
  """
  ACCESS_LEVEL_ASC

  """
  Access level descending order.
  """
  ACCESS_LEVEL_DESC

  """
  User's full name ascending order.
  """
  USER_FULL_NAME_ASC

  """
  User's full name descending order.
  """
  USER_FULL_NAME_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
Defines which user roles, users, or groups can merge into a protected branch.
"""
type MergeAccessLevel {
  """
  GitLab::Access level.
  """
  accessLevel: Int!

  """
  Human readable representation for this access level.
  """
  accessLevelDescription: String!
}

"""
The connection type for MergeAccessLevel.
"""
type MergeAccessLevelConnection {
  """
  A list of edges.
  """
  edges: [MergeAccessLevelEdge]

  """
  A list of nodes.
  """
  nodes: [MergeAccessLevel]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeAccessLevelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeAccessLevel
}

"""
Defines which user roles, users, or groups can merge into a protected branch.
"""
input MergeAccessLevelInput {
  """
  Access level allowed to perform action.
  """
  accessLevel: Int
}

type MergeRequest implements NoteableInterface & Todoable {
  """
  Indicates if members of the target project can push to the fork.
  """
  allowCollaboration: Boolean

  """
  Allows assigning multiple users to a merge request.
  """
  allowsMultipleAssignees: Boolean!

  """
  Allows assigning multiple reviewers to a merge request.
  """
  allowsMultipleReviewers: Boolean!

  """
  Indicates if the merge request has all the required approvals.
  """
  approved: Boolean!

  """
  Users who approved the merge request.
  """
  approvedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Assignees of the merge request.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestAssigneeConnection

  """
  User who created this merge request.
  """
  author: MergeRequestAuthor

  """
  Indicates if auto merge is enabled for the merge request.
  """
  autoMergeEnabled: Boolean!

  """
  Selected auto merge strategy.
  """
  autoMergeStrategy: String

  """
  Array of available auto merge strategies.
  """
  availableAutoMergeStrategies: [String!]

  """
  All commenters on this noteable.
  """
  commenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection!

  """
  Number of commits in the merge request.
  """
  commitCount: Int

  """
  Users who have added commits to the merge request.
  """
  committers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Indicates if the merge request has conflicts.
  """
  conflicts: Boolean!

  """
  Timestamp of when the merge request was created.
  """
  createdAt: Time!

  """
  Default merge commit message of the merge request.
  """
  defaultMergeCommitMessage: String

  """
  Default squash commit message of the merge request.
  """
  defaultSquashCommitMessage: String

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Detailed merge status of the merge request.
  """
  detailedMergeStatus: DetailedMergeStatus

  """
  Indicates if comments on the merge request are locked to members only.
  """
  discussionLocked: Boolean!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  Number of downvotes for the merge request.
  """
  downvotes: Int!

  """
  Indicates if the merge request is a draft.
  """
  draft: Boolean!

  """
  Indicates if the merge request has CI.
  """
  hasCi: Boolean!

  """
  Human-readable time estimate of the merge request.
  """
  humanTimeEstimate: String

  """
  Human-readable total time reported as spent on the merge request.
  """
  humanTotalTimeSpent: String

  """
  ID of the merge request.
  """
  id: ID!

  """
  Internal ID of the merge request.
  """
  iid: String!

  """
  Commit SHA of the merge request if merge is in progress.
  """
  inProgressMergeCommitSha: String

  """
  Labels of the merge request.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  SHA of the merge request commit (set once merged).
  """
  mergeCommitSha: String

  """
  Error message due to a merge error.
  """
  mergeError: String

  """
  Indicates if a merge is currently occurring.
  """
  mergeOngoing: Boolean!

  """
  Status of the merge request. Deprecated in GitLab 14.0: This was renamed.
  """
  mergeStatus: String
  @deprecated(
    reason: "This was renamed. Please use `MergeRequest.mergeStatusEnum`. Deprecated in GitLab 14.0."
  )

  """
  Merge status of the merge request.
  """
  mergeStatusEnum: MergeStatus

  """
  User who merged this merge request or set it to auto-merge.
  """
  mergeUser: UserCore

  """
  Indicates if the merge has been set to auto-merge.
  """
  mergeWhenPipelineSucceeds: Boolean

  """
  Status of all mergeability checks of the merge request. Introduced in GitLab 16.5: **Status**: Experiment.
  """
  mergeabilityChecks: [MergeRequestMergeabilityCheck!]!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.5.")

  """
  Indicates if the merge request is mergeable.
  """
  mergeable: Boolean!

  """
  Indicates if all discussions in the merge request have been resolved, allowing the merge request to be merged.
  """
  mergeableDiscussionsState: Boolean

  """
  Timestamp of when the merge request was merged, null if not merged.
  """
  mergedAt: Time

  """
  All notes on this noteable.
  """
  notes(
    """
    Type of notes collection: ALL_NOTES, ONLY_COMMENTS, ONLY_ACTIVITY.
    """
    filter: NotesFilterType = ALL_NOTES

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Participants in the merge request. This includes the author, assignees, reviewers, and users mentioned in notes.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestParticipantConnection

  """
  Timestamp of when the merge request was prepared.
  """
  preparedAt: Time

  """
  Alias for target_project.
  """
  project: Project!

  """
  ID of the merge request project.
  """
  projectId: Int!

  """
  Rebase commit SHA of the merge request.
  """
  rebaseCommitSha: String

  """
  Indicates if there is a rebase currently in progress for the merge request.
  """
  rebaseInProgress: Boolean!

  """
  Internal reference of the merge request. Returned in shortened format by default.
  """
  reference(
    """
    Boolean option specifying whether the reference should be returned in full.
    """
    full: Boolean = false
  ): String!

  """
  Indicates if merge request was retargeted.
  """
  retargeted: Boolean

  """
  Users from whom a review has been requested.
  """
  reviewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestReviewerConnection

  """
  Indicates if the merge request is created by @GitLab-Security-Bot. Deprecated in GitLab 16.11: Security Auto Fix experiment feature was removed. It was always hidden behind `security_auto_fix` feature flag.
  """
  securityAutoFix: Boolean
  @deprecated(
    reason: "Security Auto Fix experiment feature was removed. It was always hidden behind `security_auto_fix` feature flag. Deprecated in GitLab 16.11."
  )

  """
  Indicates if the merge request will be rebased.
  """
  shouldBeRebased: Boolean!

  """
  Source project of the merge request.
  """
  sourceProject: Project

  """
  ID of the merge request source project.
  """
  sourceProjectId: Int

  """
  Indicates if the merge request is set to be squashed when merged. [Project settings](https://docs.gitlab.com/ee/user/project/merge_requests/squash_and_merge.html#configure-squash-options-for-a-project) may override this value. Use `squash_on_merge` instead to take project squash options into account.
  """
  squash: Boolean!

  """
  Indicates if the merge request will be squashed when merged.
  """
  squashOnMerge: Boolean!

  """
  State of the merge request.
  """
  state: MergeRequestState!

  """
  Indicates if the currently logged in user is subscribed to this merge request.
  """
  subscribed: Boolean!

  """
  Indicates if the merge request supports locked labels.
  """
  supportsLockOnMerge: Boolean!

  """
  Target project of the merge request.
  """
  targetProject: Project!

  """
  ID of the merge request target project.
  """
  targetProjectId: Int!

  """
  Completion status of tasks
  """
  taskCompletionStatus: TaskCompletionStatus!

  """
  Time estimate of the merge request.
  """
  timeEstimate: Int!

  """
  Timelogs on the merge request.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection!

  """
  Title of the merge request.
  """
  title: String!

  """
  GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Total time (in seconds) reported as spent on the merge request.
  """
  totalTimeSpent: Int!

  """
  Timestamp of when the merge request was last updated.
  """
  updatedAt: Time!

  """
  Number of upvotes for the merge request.
  """
  upvotes: Int!

  """
  Number of user discussions in the merge request.
  """
  userDiscussionsCount: Int

  """
  User notes count of the merge request.
  """
  userNotesCount: Int

  """
  Permissions for the current user on the resource
  """
  userPermissions: MergeRequestPermissions!

  """
  Web path of the merge request.
  """
  webPath: String!

  """
  Web URL of the merge request.
  """
  webUrl: String
}

"""
Autogenerated input type of MergeRequestAccept
"""
input MergeRequestAcceptInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  How to merge the merge request.
  """
  strategy: MergeStrategyEnum

  """
  Custom merge commit message.
  """
  commitMessage: String

  """
  HEAD SHA at the time when the merge was requested.
  """
  sha: String!

  """
  Custom squash commit message (if squash is true).
  """
  squashCommitMessage: String

  """
  Squash commits on the source branch before merge.
  """
  squash: Boolean = false
}

"""
Autogenerated return type of MergeRequestAccept.
"""
type MergeRequestAcceptPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
A user assigned to a merge request.
"""
type MergeRequestAssignee implements User {
    """
    URL of the user's avatar.
    """
    avatarUrl: String

    """
    Bio of the user.
    """
    bio: String

    """
    Indicates if the user is a bot.
    """
    bot: Boolean!

    """
    User callouts that belong to the user.
    """
    callouts(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): UserCalloutConnection

    """
    User's default commit email.
    """
    commitEmail: String

    """
    Projects the user has contributed to.
    """
    contributedProjects(
        """
        Sort contributed projects.
        """
        sort: ProjectSort = LATEST_ACTIVITY_DESC

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProjectConnection

    """
    Timestamp of when the user was created.
    """
    createdAt: Time

    """
    Discord ID of the user.
    """
    discord: String

    """
    User email. Deprecated in GitLab 13.7: This was renamed.
    """
    email: String
    @deprecated(
        reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
    )

    """
    User's email addresses.
    """
    emails(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): EmailConnection

    """
    Whether Gitpod is enabled at the user level.
    """
    gitpodEnabled: Boolean

    """
    Group count for the user.
    """
    groupCount: Int

    """
    Group memberships of the user.
    """
    groupMemberships(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): GroupMemberConnection

    """
    Groups where the user has access.
    """
    groups(
        """
        Filter by permissions the user has on groups.
        """
        permissionScope: GroupPermission

        """
        Search by group name or path.
        """
        search: String

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): GroupConnection

    """
    ID of the user.
    """
    id: ID!

    """
    IDE settings.
    """
    ide: Ide

    """
    Job title of the user.
    """
    jobTitle: String

    """
    Date the user last performed any actions.
    """
    lastActivityOn: Date

    """
    LinkedIn profile name of the user.
    """
    linkedin: String

    """
    Location of the user.
    """
    location: String

    """
    Details of this user's interactions with the merge request.
    """
    mergeRequestInteraction: UserMergeRequestInteraction

    """
    Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
    """
    name: String!

    """
    Personal namespace of the user.
    """
    namespace: Namespace

    """
    User's custom namespace commit emails.
    """
    namespaceCommitEmails(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): NamespaceCommitEmailConnection

    """
    Who the user represents or works for.
    """
    organization: String

    """
    Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
    """
    organizations(
        """
        Search query, which can be for the organization name or a path.
        """
        search: String

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): OrganizationConnection
    @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

    """
    Web path to the Gitpod section within user preferences.
    """
    preferencesGitpodPath: String

    """
    Web path to enable Gitpod for the user.
    """
    profileEnableGitpodPath: String

    """
    Project memberships of the user.
    """
    projectMemberships(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProjectMemberConnection

    """
    Pronouns of the user.
    """
    pronouns: String

    """
    User's public email.
    """
    publicEmail: String

    """
    Merge requests assigned to the user for review.
    """
    reviewRequestedMergeRequests(
        """
        Array of IIDs of merge requests, for example `[1, 2]`.
        """
        iids: [String!]

        """
        Array of source branch names.
        All resolved merge requests will have one of these branches as their source.
        """
        sourceBranches: [String!]

        """
        Array of target branch names.
        All resolved merge requests will have one of these branches as their target.
        """
        targetBranches: [String!]

        """
        Merge request state. If provided, all resolved merge requests will have the state.
        """
        state: MergeRequestState

        """
        Limit result to draft merge requests.
        """
        draft: Boolean

        """
        Limit results to approved merge requests.
        Available only when the feature flag `mr_approved_filter` is enabled.
        """
        approved: Boolean

        """
        Merge requests created after the timestamp.
        """
        createdAfter: Time

        """
        Merge requests created before the timestamp.
        """
        createdBefore: Time

        """
        Merge requests deployed after the timestamp.
        """
        deployedAfter: Time

        """
        Merge requests deployed before the timestamp.
        """
        deployedBefore: Time

        """
        ID of the deployment.
        """
        deploymentId: String

        """
        Merge requests updated after the timestamp.
        """
        updatedAfter: Time

        """
        Merge requests updated before the timestamp.
        """
        updatedBefore: Time

        """
        Array of label names. All resolved merge requests will have all of these labels.
        """
        labels: [String!]

        """
        Merge requests merged after the date.
        """
        mergedAfter: Time

        """
        Merge requests merged before the date.
        """
        mergedBefore: Time

        """
        Title of the milestone. Incompatible with milestoneWildcardId.
        """
        milestoneTitle: String

        """
        Sort merge requests by the criteria.
        """
        sort: MergeRequestSort = created_desc

        """
        The global ID of the group the authored merge requests should be in.
        Merge requests in subgroups are included.
        """
        groupId: GroupID

        """
        The full-path of the project the authored merge requests should be in.
        Incompatible with projectId.
        """
        projectPath: String

        """
        The global ID of the project the authored merge requests should be in.
        Incompatible with projectPath.
        """
        projectId: ProjectID

        """
        Username of the author.
        """
        authorUsername: String

        """
        Username of the assignee.
        """
        assigneeUsername: String

        """
        Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
        """
        assigneeWildcardId: AssigneeWildcardId

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): MergeRequestConnection

    """
    Saved replies authored by the user.
    """
    savedReplies(
        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SavedReplyConnection

    """
    Saved reply authored by the user.
    """
    savedReply(
        """
        ID of a saved reply.
        """
        id: UsersSavedReplyID!
    ): SavedReply

    """
    Snippets authored by the user.
    """
    snippets(
        """
        Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
        """
        ids: [SnippetID!]

        """
        Visibility of the snippet.
        """
        visibility: VisibilityScopesEnum

        """
        Type of snippet.
        """
        type: TypeEnum

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): SnippetConnection

    """
    Projects starred by the user.
    """
    starredProjects(
        """
        Search query.
        """
        search: String

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): ProjectConnection

    """
    State of the user.
    """
    state: UserState!

    """
    User status.
    """
    status: UserStatus

    """
    Time logged by the user.
    """
    timelogs(
        """
        List timelogs within a date range where the logged date is equal to or after startDate.
        """
        startDate: Time

        """
        List timelogs within a date range where the logged date is equal to or before endDate.
        """
        endDate: Time

        """
        List timelogs within a time range where the logged time is equal to or after startTime.
        """
        startTime: Time

        """
        List timelogs within a time range where the logged time is equal to or before endTime.
        """
        endTime: Time

        """
        List timelogs for a project.
        """
        projectId: ProjectID

        """
        List timelogs for a group.
        """
        groupId: GroupID

        """
        List timelogs for a user.
        """
        username: String

        """
        List timelogs in a particular order.
        """
        sort: TimelogSort = SPENT_AT_ASC

        """
        Returns the elements in the list that come after the specified cursor.
        """
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Returns the first _n_ elements from the list.
        """
        first: Int

        """
        Returns the last _n_ elements from the list.
        """
        last: Int
    ): TimelogConnection

    """
    X (formerly Twitter) username of the user.
    """
    twitter: String

    """
    Permissions for the current user on the resource.
    """
    userPermissions: UserPermissions!

    """
    Username of the user. Unique within this instance of GitLab.
    """
    username: String!

    """
    Web path of the user.
    """
    webPath: String!

    """
    Web URL of the user.
    """
    webUrl: String!
}

"""
The connection type for MergeRequestAssignee.
"""
type MergeRequestAssigneeConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [MergeRequestAssigneeEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestAssignee]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestAssigneeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestAssignee
}

"""
The author of the merge request.
"""
type MergeRequestAuthor implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequest.
"""
type MergeRequestConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [MergeRequestEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total sum of time to merge, in seconds, for the collection of merge requests.
  """
  totalTimeToMerge: Float
}

"""
Autogenerated input type of MergeRequestCreate
"""
input MergeRequestCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project full path the merge request is associated with.
  """
  projectPath: ID!

  """
  Title of the merge request.
  """
  title: String!

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  Labels of the merge request.
  """
  labels: [String!]
}

"""
Autogenerated return type of MergeRequestCreate.
"""
type MergeRequestCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
An edge in a connection.
"""
type MergeRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequest
}

"""
A `MergeRequestID` is a global ID. It is encoded as a string.

An example `MergeRequestID` is: `"gid://gitlab/MergeRequest/1"`.
"""
scalar MergeRequestID

"""
Mergeability check of the merge request.
"""
type MergeRequestMergeabilityCheck {
  """
  Identifier of the mergeability check.
  """
  identifier: MergeabilityCheckIdentifier!

  """
  Status of the mergeability check.
  """
  status: MergeabilityCheckStatus!
}

"""
New state to apply to a merge request.
"""
enum MergeRequestNewState {
  """
  Open the merge request if it is closed.
  """
  OPEN

  """
  Close the merge request if it is open.
  """
  CLOSED
}

"""
A user participating in a merge request.
"""
type MergeRequestParticipant implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequestParticipant.
"""
type MergeRequestParticipantConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [MergeRequestParticipantEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestParticipant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestParticipantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestParticipant
}

"""
Check permissions for the current user on a merge request
"""
type MergeRequestPermissions {
  """
  If `true`, the user can perform `admin_merge_request` on this resource
  """
  adminMergeRequest: Boolean!

  """
  If `true`, the user can perform `can_approve` on this resource
  """
  canApprove: Boolean!

  """
  If `true`, the user can perform `can_merge` on this resource
  """
  canMerge: Boolean!

  """
  If `true`, the user can perform `cherry_pick_on_current_merge_request` on this resource
  """
  cherryPickOnCurrentMergeRequest: Boolean!

  """
  If `true`, the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  If `true`, the user can perform `read_merge_request` on this resource
  """
  readMergeRequest: Boolean!

  """
  If `true`, the user can perform `revert_on_current_merge_request` on this resource
  """
  revertOnCurrentMergeRequest: Boolean!

  """
  If `true`, the user can perform `update_merge_request` on this resource
  """
  updateMergeRequest: Boolean!
}

"""
State of a review of a GitLab merge request.
"""
enum MergeRequestReviewState {
  """
  Awaiting review from merge request reviewer.
  """
  UNREVIEWED

  """
  Merge request reviewer has reviewed.
  """
  REVIEWED

  """
  Merge request reviewer has requested changes.
  """
  REQUESTED_CHANGES

  """
  Merge request reviewer has approved the changes.
  """
  APPROVED

  """
  Merge request reviewer removed their approval of the changes.
  """
  UNAPPROVED
}

"""
A user assigned to a merge request as a reviewer.
"""
type MergeRequestReviewer implements User {
  """
  Merge requests assigned to the user.
  """
  assignedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Merge requests authored by the user.
  """
  authoredMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Details of this user's interactions with the merge request.
  """
  mergeRequestInteraction: UserMergeRequestInteraction

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for MergeRequestReviewer.
"""
type MergeRequestReviewerConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [MergeRequestReviewerEdge]

  """
  A list of nodes.
  """
  nodes: [MergeRequestReviewer]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MergeRequestReviewerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: MergeRequestReviewer
}

"""
Autogenerated input type of MergeRequestReviewerRereview
"""
input MergeRequestReviewerRereviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  User ID for the user that has been requested for a new review.
  """
  userId: UserID!
}

"""
Autogenerated return type of MergeRequestReviewerRereview.
"""
type MergeRequestReviewerRereviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetAssignees
"""
input MergeRequestSetAssigneesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Usernames to assign to the resource. Replaces existing assignees by default.
  """
  assigneeUsernames: [String!]!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode = REPLACE
}

"""
Autogenerated return type of MergeRequestSetAssignees.
"""
type MergeRequestSetAssigneesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetDraft
"""
input MergeRequestSetDraftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Whether or not to set the merge request as a draft.
  """
  draft: Boolean!
}

"""
Autogenerated return type of MergeRequestSetDraft.
"""
type MergeRequestSetDraftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetLabels
"""
input MergeRequestSetLabelsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Label IDs to set. Replaces existing labels by default.
  """
  labelIds: [LabelID!]!

  """
  Changes the operation mode. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode
}

"""
Autogenerated return type of MergeRequestSetLabels.
"""
type MergeRequestSetLabelsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetLocked
"""
input MergeRequestSetLockedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Whether or not to lock the merge request.
  """
  locked: Boolean!
}

"""
Autogenerated return type of MergeRequestSetLocked.
"""
type MergeRequestSetLockedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetReviewers
"""
input MergeRequestSetReviewersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Usernames of reviewers to assign. Replaces existing reviewers by default.
  """
  reviewerUsernames: [String!]!

  """
  Operation to perform. Defaults to REPLACE.
  """
  operationMode: MutationOperationMode = REPLACE
}

"""
Autogenerated return type of MergeRequestSetReviewers.
"""
type MergeRequestSetReviewersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Autogenerated input type of MergeRequestSetSubscription
"""
input MergeRequestSetSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Desired state of the subscription.
  """
  subscribedState: Boolean!

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!
}

"""
Autogenerated return type of MergeRequestSetSubscription.
"""
type MergeRequestSetSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
Values for sorting merge requests
"""
enum MergeRequestSort {
  """
  Merge time by ascending order.
  """
  MERGED_AT_ASC

  """
  Merge time by descending order.
  """
  MERGED_AT_DESC

  """
  Closed time by ascending order.
  """
  CLOSED_AT_ASC

  """
  Closed time by descending order.
  """
  CLOSED_AT_DESC

  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Priority by ascending order.
  """
  PRIORITY_ASC

  """
  Priority by descending order.
  """
  PRIORITY_DESC

  """
  Label priority by ascending order.
  """
  LABEL_PRIORITY_ASC

  """
  Label priority by descending order.
  """
  LABEL_PRIORITY_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
State of a GitLab merge request
"""
enum MergeRequestState {
  """
  Merge request has been merged.
  """
  merged

  """
  Opened merge request.
  """
  opened

  """
  In closed state.
  """
  closed

  """
  Discussion has been locked.
  """
  locked

  """
  All available.
  """
  all
}

"""
Autogenerated input type of MergeRequestUpdate
"""
input MergeRequestUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the merge request to mutate is in.
  """
  projectPath: ID!

  """
  IID of the merge request to mutate.
  """
  iid: String!

  """
  Title of the merge request.
  """
  title: String

  """
  Description of the merge request (Markdown rendered as HTML for caching).
  """
  description: String

  """
  Action to perform to change the state.
  """
  state: MergeRequestNewState

  """
  Estimated time to complete the merge request. Use `null` or `0` to remove the current estimate.
  """
  timeEstimate: String
}

"""
Autogenerated return type of MergeRequestUpdate.
"""
type MergeRequestUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Merge request after mutation.
  """
  mergeRequest: MergeRequest
}

"""
A `MergeRequestsClosingIssuesID` is a global ID. It is encoded as a string.

An example `MergeRequestsClosingIssuesID` is: `"gid://gitlab/MergeRequestsClosingIssues/1"`.
"""
scalar MergeRequestsClosingIssuesID

"""
Representation of whether a GitLab merge request can be merged.
"""
enum MergeStatus {
  """
  Merge status has not been checked.
  """
  UNCHECKED

  """
  Currently checking for mergeability.
  """
  CHECKING

  """
  There are no conflicts between the source and target branches.
  """
  CAN_BE_MERGED

  """
  There are conflicts between the source and target branches.
  """
  CANNOT_BE_MERGED

  """
  Currently unchecked. The previous state was `CANNOT_BE_MERGED`.
  """
  CANNOT_BE_MERGED_RECHECK
}

enum MergeStrategyEnum {
  """
  Use the merge_when_pipeline_succeeds merge strategy.
  """
  MERGE_WHEN_PIPELINE_SUCCEEDS
}

"""
Representation of mergeability check identifier.
"""
enum MergeabilityCheckIdentifier {
  """
  Checks whether the merge request is open
  """
  NOT_OPEN

  """
  Checks whether the merge request is draft
  """
  DRAFT_STATUS

  """
  Checks source branch exists and contains commits.
  """
  COMMITS_STATUS

  """
  Checks whether the merge request has open discussions
  """
  DISCUSSIONS_NOT_RESOLVED

  """
  Checks whether CI has passed
  """
  CI_MUST_PASS

  """
  Checks whether the merge request has a conflict
  """
  CONFLICT

  """
  Checks whether the merge request needs to be rebased
  """
  NEED_REBASE
}

"""
Representation of whether a mergeability check passed, failed or is inactive.
"""
enum MergeabilityCheckStatus {
  """
  Mergeability check has passed.
  """
  SUCCESS

  """
  Mergeability check has failed. The merge request cannot be merged.
  """
  FAILED

  """
  Mergeability check is disabled via settings.
  """
  INACTIVE

  """
  Mergeability check has passed with a warning.
  """
  WARNING
}

type Metadata {
  """
  Enterprise edition.
  """
  enterprise: Boolean!

  """
  Metadata about KAS.
  """
  kas: Kas!

  """
  Revision.
  """
  revision: String!

  """
  Version.
  """
  version: String!
}

type MetricsDashboardAnnotation {
  """
  Description of the annotation.
  """
  description: String

  """
  Timestamp marking end of annotated time span.
  """
  endingAt: Time

  """
  ID of the annotation.
  """
  id: ID!

  """
  ID of a dashboard panel to which the annotation should be scoped.
  """
  panelId: String

  """
  Timestamp marking start of annotated time span.
  """
  startingAt: Time
}

type Mutation {
  adminSidekiqQueuesDeleteJobs(
    """
    Parameters for AdminSidekiqQueuesDeleteJobs
    """
    input: AdminSidekiqQueuesDeleteJobsInput!
  ): AdminSidekiqQueuesDeleteJobsPayload
  boardListCreate(
    """
    Parameters for BoardListCreate
    """
    input: BoardListCreateInput!
  ): BoardListCreatePayload
  catalogResourcesCreate(
    """
    Parameters for CatalogResourcesCreate
    """
    input: CatalogResourcesCreateInput!
  ): CatalogResourcesCreatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.11.")
  catalogResourcesDestroy(
    """
    Parameters for CatalogResourcesDestroy
    """
    input: CatalogResourcesDestroyInput!
  ): CatalogResourcesDestroyPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Configure Secret Detection for a project by enabling Secret Detection
  in a new or modified `.gitlab-ci.yml` file in a new branch. The new
  branch and a URL to create a Merge Request are a part of the
  response.
  """
  configureSecretDetection(
    """
    Parameters for ConfigureSecretDetection
    """
    input: ConfigureSecretDetectionInput!
  ): ConfigureSecretDetectionPayload
  createBoard(
    """
    Parameters for CreateBoard
    """
    input: CreateBoardInput!
  ): CreateBoardPayload
  createDiscussion(
    """
    Parameters for CreateDiscussion
    """
    input: CreateDiscussionInput!
  ): CreateDiscussionPayload

  """
  Creates a Note.
  If the body of the Note contains only quick actions,
  the Note will be destroyed during an update, and no Note will be
  returned.
  """
  createNote(
    """
    Parameters for CreateNote
    """
    input: CreateNoteInput!
  ): CreateNotePayload
  createSnippet(
    """
    Parameters for CreateSnippet
    """
    input: CreateSnippetInput!
  ): CreateSnippetPayload
  deleteAnnotation(
    """
    Parameters for DeleteAnnotation
    """
    input: DeleteAnnotationInput!
  ): DeleteAnnotationPayload
  @deprecated(
    reason: "Underlying feature was removed in 16.0. Deprecated in GitLab 16.0."
  )
  destroyBoard(
    """
    Parameters for DestroyBoard
    """
    input: DestroyBoardInput!
  ): DestroyBoardPayload
  destroyBoardList(
    """
    Parameters for DestroyBoardList
    """
    input: DestroyBoardListInput!
  ): DestroyBoardListPayload
  destroyNote(
    """
    Parameters for DestroyNote
    """
    input: DestroyNoteInput!
  ): DestroyNotePayload
  destroySnippet(
    """
    Parameters for DestroySnippet
    """
    input: DestroySnippetInput!
  ): DestroySnippetPayload

  """
  Toggles the resolved state of a discussion
  """
  discussionToggleResolve(
    """
    Parameters for DiscussionToggleResolve
    """
    input: DiscussionToggleResolveInput!
  ): DiscussionToggleResolvePayload

  """
  A mutation that does not perform any changes.

  This is expected to be used for testing of endpoints, to verify
  that a user has mutation access.
  """
  echoCreate(
    """
    Parameters for EchoCreate
    """
    input: EchoCreateInput!
  ): EchoCreatePayload
  groupMemberBulkUpdate(
    """
    Parameters for GroupMemberBulkUpdate
    """
    input: GroupMemberBulkUpdateInput!
  ): GroupMemberBulkUpdatePayload
  groupUpdate(
    """
    Parameters for GroupUpdate
    """
    input: GroupUpdateInput!
  ): GroupUpdatePayload
  issueLinkAlerts(
    """
    Parameters for IssueLinkAlerts
    """
    input: IssueLinkAlertsInput!
  ): IssueLinkAlertsPayload
  issueMove(
    """
    Parameters for IssueMove
    """
    input: IssueMoveInput!
  ): IssueMovePayload
  issueMoveList(
    """
    Parameters for IssueMoveList
    """
    input: IssueMoveListInput!
  ): IssueMoveListPayload
  issueSetAssignees(
    """
    Parameters for IssueSetAssignees
    """
    input: IssueSetAssigneesInput!
  ): IssueSetAssigneesPayload
  issueSetConfidential(
    """
    Parameters for IssueSetConfidential
    """
    input: IssueSetConfidentialInput!
  ): IssueSetConfidentialPayload
  issueSetDueDate(
    """
    Parameters for IssueSetDueDate
    """
    input: IssueSetDueDateInput!
  ): IssueSetDueDatePayload
  issueSetEscalationStatus(
    """
    Parameters for IssueSetEscalationStatus
    """
    input: IssueSetEscalationStatusInput!
  ): IssueSetEscalationStatusPayload
  issueSetLocked(
    """
    Parameters for IssueSetLocked
    """
    input: IssueSetLockedInput!
  ): IssueSetLockedPayload
  issueSetSeverity(
    """
    Parameters for IssueSetSeverity
    """
    input: IssueSetSeverityInput!
  ): IssueSetSeverityPayload
  issueSetSubscription(
    """
    Parameters for IssueSetSubscription
    """
    input: IssueSetSubscriptionInput!
  ): IssueSetSubscriptionPayload
  labelCreate(
    """
    Parameters for LabelCreate
    """
    input: LabelCreateInput!
  ): LabelCreatePayload
  markAsSpamSnippet(
    """
    Parameters for MarkAsSpamSnippet
    """
    input: MarkAsSpamSnippetInput!
  ): MarkAsSpamSnippetPayload

  """
  Accepts a merge request.
  When accepted, the source branch will be scheduled to merge into the target branch, either
  immediately if possible, or using one of the automatic merge strategies.

  [In GitLab 16.5](https://gitlab.com/gitlab-org/gitlab/-/issues/421510), the merging happens asynchronously.
  This results in `mergeRequest` and `state` not updating after a mutation request,
  because the merging may not have happened yet.
  """
  mergeRequestAccept(
    """
    Parameters for MergeRequestAccept
    """
    input: MergeRequestAcceptInput!
  ): MergeRequestAcceptPayload
  mergeRequestCreate(
    """
    Parameters for MergeRequestCreate
    """
    input: MergeRequestCreateInput!
  ): MergeRequestCreatePayload
  mergeRequestReviewerRereview(
    """
    Parameters for MergeRequestReviewerRereview
    """
    input: MergeRequestReviewerRereviewInput!
  ): MergeRequestReviewerRereviewPayload
  mergeRequestSetAssignees(
    """
    Parameters for MergeRequestSetAssignees
    """
    input: MergeRequestSetAssigneesInput!
  ): MergeRequestSetAssigneesPayload
  mergeRequestSetDraft(
    """
    Parameters for MergeRequestSetDraft
    """
    input: MergeRequestSetDraftInput!
  ): MergeRequestSetDraftPayload
  mergeRequestSetLabels(
    """
    Parameters for MergeRequestSetLabels
    """
    input: MergeRequestSetLabelsInput!
  ): MergeRequestSetLabelsPayload
  mergeRequestSetLocked(
    """
    Parameters for MergeRequestSetLocked
    """
    input: MergeRequestSetLockedInput!
  ): MergeRequestSetLockedPayload
  mergeRequestSetReviewers(
    """
    Parameters for MergeRequestSetReviewers
    """
    input: MergeRequestSetReviewersInput!
  ): MergeRequestSetReviewersPayload
  mergeRequestSetSubscription(
    """
    Parameters for MergeRequestSetSubscription
    """
    input: MergeRequestSetSubscriptionInput!
  ): MergeRequestSetSubscriptionPayload

  """
  Update attributes of a merge request
  """
  mergeRequestUpdate(
    """
    Parameters for MergeRequestUpdate
    """
    input: MergeRequestUpdateInput!
  ): MergeRequestUpdatePayload
  organizationCreate(
    """
    Parameters for OrganizationCreate
    """
    input: OrganizationCreateInput!
  ): OrganizationCreatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")
  organizationUpdate(
    """
    Parameters for OrganizationUpdate
    """
    input: OrganizationUpdateInput!
  ): OrganizationUpdatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  Updates multiple members of a project. To use this mutation, you must have at least the Maintainer role.
  """
  projectMemberBulkUpdate(
    """
    Parameters for ProjectMemberBulkUpdate
    """
    input: ProjectMemberBulkUpdateInput!
  ): ProjectMemberBulkUpdatePayload
  projectSyncFork(
    """
    Parameters for ProjectSyncFork
    """
    input: ProjectSyncForkInput!
  ): ProjectSyncForkPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")
  savedReplyCreate(
    """
    Parameters for SavedReplyCreate
    """
    input: SavedReplyCreateInput!
  ): SavedReplyCreatePayload
  savedReplyDestroy(
    """
    Parameters for SavedReplyDestroy
    """
    input: SavedReplyDestroyInput!
  ): SavedReplyDestroyPayload
  savedReplyUpdate(
    """
    Parameters for SavedReplyUpdate
    """
    input: SavedReplyUpdateInput!
  ): SavedReplyUpdatePayload
  starProject(
    """
    Parameters for StarProject
    """
    input: StarProjectInput!
  ): StarProjectPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")
  timelineEventCreate(
    """
    Parameters for TimelineEventCreate
    """
    input: TimelineEventCreateInput!
  ): TimelineEventCreatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.6.")
  timelineEventDestroy(
    """
    Parameters for TimelineEventDestroy
    """
    input: TimelineEventDestroyInput!
  ): TimelineEventDestroyPayload
  timelineEventPromoteFromNote(
    """
    Parameters for TimelineEventPromoteFromNote
    """
    input: TimelineEventPromoteFromNoteInput!
  ): TimelineEventPromoteFromNotePayload
  timelineEventTagCreate(
    """
    Parameters for TimelineEventTagCreate
    """
    input: TimelineEventTagCreateInput!
  ): TimelineEventTagCreatePayload
  timelineEventUpdate(
    """
    Parameters for TimelineEventUpdate
    """
    input: TimelineEventUpdateInput!
  ): TimelineEventUpdatePayload
  timelogCreate(
    """
    Parameters for TimelogCreate
    """
    input: TimelogCreateInput!
  ): TimelogCreatePayload
  timelogDelete(
    """
    Parameters for TimelogDelete
    """
    input: TimelogDeleteInput!
  ): TimelogDeletePayload
  updateBoard(
    """
    Parameters for UpdateBoard
    """
    input: UpdateBoardInput!
  ): UpdateBoardPayload
  updateBoardList(
    """
    Parameters for UpdateBoardList
    """
    input: UpdateBoardListInput!
  ): UpdateBoardListPayload

  updateIssue(
    """
    Parameters for UpdateIssue
    """
    input: UpdateIssueInput!
  ): UpdateIssuePayload

  """
  Updates a Note.
  If the body of the Note contains only quick actions,
  the Note will be destroyed during an update, and no Note will be
  returned.
  """
  updateNote(
    """
    Parameters for UpdateNote
    """
    input: UpdateNoteInput!
  ): UpdateNotePayload
  updateSnippet(
    """
    Parameters for UpdateSnippet
    """
    input: UpdateSnippetInput!
  ): UpdateSnippetPayload

  """
  Deletes an upload.
  """
  uploadDelete(
    """
    Parameters for UploadDelete
    """
    input: UploadDeleteInput!
  ): UploadDeletePayload
  userCalloutCreate(
    """
    Parameters for UserCalloutCreate
    """
    input: UserCalloutCreateInput!
  ): UserCalloutCreatePayload
  userPreferencesUpdate(
    """
    Parameters for UserPreferencesUpdate
    """
    input: UserPreferencesUpdateInput!
  ): UserPreferencesUpdatePayload
  userSetNamespaceCommitEmail(
    """
    Parameters for UserSetNamespaceCommitEmail
    """
    input: UserSetNamespaceCommitEmailInput!
  ): UserSetNamespaceCommitEmailPayload

  """
  Adds a closing merge request to a work item Introduced in GitLab 17.1: **Status**: Experiment.
  """
  workItemAddClosingMergeRequest(
    """
    Parameters for WorkItemAddClosingMergeRequest
    """
    input: WorkItemAddClosingMergeRequestInput!
  ): WorkItemAddClosingMergeRequestPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.1.")

  """
  Add linked items to the work item. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  workItemAddLinkedItems(
    """
    Parameters for WorkItemAddLinkedItems
    """
    input: WorkItemAddLinkedItemsInput!
  ): WorkItemAddLinkedItemsPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")

  """
  Converts the work item to a new type Introduced in GitLab 15.11: **Status**: Experiment.
  """
  workItemConvert(
    """
    Parameters for WorkItemConvert
    """
    input: WorkItemConvertInput!
  ): WorkItemConvertPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.11.")

  """
  Creates a work item. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItemCreate(
    """
    Parameters for WorkItemCreate
    """
    input: WorkItemCreateInput!
  ): WorkItemCreatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")

  """
  Creates a work item from a task in another work item's description. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItemCreateFromTask(
    """
    Parameters for WorkItemCreateFromTask
    """
    input: WorkItemCreateFromTaskInput!
  ): WorkItemCreateFromTaskPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")

  """
  Deletes a work item. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItemDelete(
    """
    Parameters for WorkItemDelete
    """
    input: WorkItemDeleteInput!
  ): WorkItemDeletePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")
  workItemExport(
    """
    Parameters for WorkItemExport
    """
    input: WorkItemExportInput!
  ): WorkItemExportPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.10.")

  """
  Remove items linked to the work item. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  workItemRemoveLinkedItems(
    """
    Parameters for WorkItemRemoveLinkedItems
    """
    input: WorkItemRemoveLinkedItemsInput!
  ): WorkItemRemoveLinkedItemsPayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")
  workItemSubscribe(
    """
    Parameters for WorkItemSubscribe
    """
    input: WorkItemSubscribeInput!
  ): WorkItemSubscribePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")

  """
  Updates a work item by Global ID. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItemUpdate(
    """
    Parameters for WorkItemUpdate
    """
    input: WorkItemUpdateInput!
  ): WorkItemUpdatePayload
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")
}

"""
Different toggles for changing mutator behavior
"""
enum MutationOperationMode {
  """
  Performs a replace operation.
  """
  REPLACE

  """
  Performs an append operation.
  """
  APPEND

  """
  Performs a removal operation.
  """
  REMOVE
}

type Namespace {
  """
  Path for the namespace's achievements. Returns `null` if the namespace is not a group, or the `achievements` feature flag is disabled. Introduced in GitLab 17.0: **Status**: Experiment.
  """
  achievementsPath: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.0.")

  """
  Indicates if the cross_project_pipeline feature is available for the namespace.
  """
  crossProjectPipelineAvailable: Boolean!

  """
  Description of the namespace.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Full name of the namespace.
  """
  fullName: String!

  """
  Full path of the namespace.
  """
  fullPath: ID!

  """
  ID of the namespace.
  """
  id: ID!

  """
  Indicates if Large File Storage (LFS) is enabled for namespace.
  """
  lfsEnabled: Boolean

  """
  Name of the namespace.
  """
  name: String!

  """
  Path of the namespace.
  """
  path: String!

  """
  Projects within this namespace.
  """
  projects(
    """
    Include also subgroup projects.
    """
    includeSubgroups: Boolean = false

    """
    Include also archived projects.
    """
    includeArchived: Boolean = true

    """
    Include projects that are not aimed for deletion.
    """
    notAimedForDeletion: Boolean = false

    """
    Search project with most similar names or paths.
    """
    search: String = null

    """
    Sort projects by the criteria.
    """
    sort: NamespaceProjectSort = null

    """
    Filter projects by IDs.
    """
    ids: [ID!] = null

    """
    Return only projects with issues enabled.
    """
    withIssuesEnabled: Boolean

    """
    Return only projects with merge requests enabled.
    """
    withMergeRequestsEnabled: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!

  """
  Indicates if users can request access to namespace.
  """
  requestAccessEnabled: Boolean

  """
  Aggregated storage statistics of the namespace. Only available for root namespaces.
  """
  rootStorageStatistics: RootStorageStatistics

  """
  Shared runners availability for the namespace and its descendants.
  """
  sharedRunnersSetting: SharedRunnersSetting

  """
  Timelog categories for the namespace. Introduced in GitLab 15.3: **Status**: Experiment.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.3.")

  """
  Visibility of the namespace.
  """
  visibility: String

  """
  Find a work item by IID directly associated with the namespace(project or group).  Returns `null` for group level work items if the `namespace_level_work_items` feature flag is disabled. Introduced in GitLab 16.10: **Status**: Experiment.
  """
  workItem(
    """
    IID of the work item.
    """
    iid: String!
  ): WorkItem
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.10.")
}

type NamespaceCommitEmail {
  """
  Timestamp the namespace commit email was created.
  """
  createdAt: Time!

  """
  Email.
  """
  email: Email!

  """
  Internal ID of the namespace commit email.
  """
  id: ID!

  """
  Namespace.
  """
  namespace: Namespace!

  """
  Timestamp the namespace commit email was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for NamespaceCommitEmail.
"""
type NamespaceCommitEmailConnection {
  """
  A list of edges.
  """
  edges: [NamespaceCommitEmailEdge]

  """
  A list of nodes.
  """
  nodes: [NamespaceCommitEmail]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NamespaceCommitEmailEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NamespaceCommitEmail
}

"""
The connection type for Namespace.
"""
type NamespaceConnection {
  """
  A list of edges.
  """
  edges: [NamespaceEdge]

  """
  A list of nodes.
  """
  nodes: [Namespace]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NamespaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Namespace
}

"""
A `NamespaceID` is a global ID. It is encoded as a string.

An example `NamespaceID` is: `"gid://gitlab/Namespace/1"`.
"""
scalar NamespaceID

"""
Values for sorting projects
"""
enum NamespaceProjectSort {
  """
  Most similar to the search query.
  """
  SIMILARITY

  """
  Sort by latest activity, descending order.
  """
  ACTIVITY_DESC

  """
  Sort by total storage size, ascending order.
  """
  STORAGE_SIZE_ASC

  """
  Sort by total storage size, descending order.
  """
  STORAGE_SIZE_DESC
}

type Note implements ResolvableInterface {
  """
  User who wrote the note.
  """
  author: UserCore

  """
  Indicates whether the note author is a contributor.
  """
  authorIsContributor: Boolean

  """
  Content of the note.
  """
  body: String!

  """
  First line of the note content.
  """
  bodyFirstLineHtml: String!

  """
  GitLab Flavored Markdown rendering of the content of the note.
  """
  bodyHtml: String

  """
  Timestamp of the note creation.
  """
  createdAt: Time!

  """
  Discussion the note is a part of.
  """
  discussion: Discussion

  """
  ID of the note.
  """
  id: NoteID!

  """
  Indicates whether the note was imported.
  """
  imported: Boolean

  """
  Indicates if the note is internal.
  """
  internal: Boolean

  """
  Timestamp when note was last edited.
  """
  lastEditedAt: Time

  """
  User who last edited the note.
  """
  lastEditedBy: UserCore

  """
  Max access level of the note author in the project.
  """
  maxAccessLevelOfAuthor: String

  """
  Project associated with the note.
  """
  project: Project

  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore

  """
  Indicates whether the note was created by the system or by a user.
  """
  system: Boolean!

  """
  Name of the icon corresponding to a system note.
  """
  systemNoteIconName: String

  """
  Timestamp of the note's last activity.
  """
  updatedAt: Time!

  """
  URL to view the note in the Web UI.
  """
  url: String

  """
  Permissions for the current user on the resource
  """
  userPermissions: NotePermissions!
}

"""
The connection type for Note.
"""
type NoteConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [NoteEdge]

  """
  A list of nodes.
  """
  nodes: [Note]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NoteEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Note
}

"""
A `NoteID` is a global ID. It is encoded as a string.

An example `NoteID` is: `"gid://gitlab/Note/1"`.
"""
scalar NoteID

type NotePermissions {
  """
  If `true`, the user can perform `admin_note` on this resource
  """
  adminNote: Boolean!

  """
  If `true`, the user can perform `award_emoji` on this resource
  """
  awardEmoji: Boolean!

  """
  If `true`, the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  If `true`, the user can perform `read_note` on this resource
  """
  readNote: Boolean!

  """
  If `true`, the user can perform `reposition_note` on this resource
  """
  repositionNote: Boolean!

  """
  If `true`, the user can perform `resolve_note` on this resource
  """
  resolveNote: Boolean!
}

"""
A `NoteableID` is a global ID. It is encoded as a string.

An example `NoteableID` is: `"gid://gitlab/Noteable/1"`.
"""
scalar NoteableID

interface NoteableInterface {
  """
  All commenters on this noteable.
  """
  commenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection!

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  All notes on this noteable.
  """
  notes(
    """
    Type of notes collection: ALL_NOTES, ONLY_COMMENTS, ONLY_ACTIVITY.
    """
    filter: NotesFilterType = ALL_NOTES

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!
}

"""
Represents an object that supports notes.
"""
union NoteableType = Issue | MergeRequest

"""
Work item notes collection type.
"""
enum NotesFilterType {
  """
  Show all activity
  """
  ALL_NOTES

  """
  Show comments only
  """
  ONLY_COMMENTS

  """
  Show history only
  """
  ONLY_ACTIVITY
}

type Organization {
  """
  Avatar URL of the organization. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  avatarUrl: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  Description of the organization. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  description: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  GitLab Flavored Markdown rendering of `description` Introduced in GitLab 16.7: **Status**: Experiment.
  """
  descriptionHtml: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  Groups within this organization that the user has access to. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  groups(
    """
    Search query for group name or group full path.
    """
    search: String

    """
    Sort order of results. Format: `<field_name>_<sort_direction>`, for example: `id_desc` or `name_asc`
    """
    sort: String = "name_asc"

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  ID of the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  id: ID!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Name of the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  name: String!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Users with access to the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  organizationUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationUserConnection!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Path of the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  path: String!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Projects within this organization that the user has access to. Introduced in GitLab 16.8: **Status**: Experiment.
  """
  projects(
    """
    Return only projects that the current user is a member of.
    """
    membership: Boolean

    """
    Search query, which can be for the project name, a path, or a description.
    """
    search: String

    """
    Include namespace in project search.
    """
    searchNamespaces: Boolean

    """
    Filter projects by topics.
    """
    topics: [String!]

    """
    Return only personal projects.
    """
    personal: Boolean

    """
    Sort order of results. Format: `<field_name>_<sort_direction>`, for example: `id_desc` or `name_asc`
    """
    sort: String = "id_desc"

    """
    Filter projects by IDs.
    """
    ids: [ID!]

    """
    Filter projects by full paths. You cannot provide more than 50 full paths.
    """
    fullPaths: [String!]

    """
    Return only projects with issues enabled.
    """
    withIssuesEnabled: Boolean

    """
    Return only projects with merge requests enabled.
    """
    withMergeRequestsEnabled: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.8.")

  """
  Web URL of the organization. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  webUrl: String!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of OrganizationCreate
"""
input OrganizationCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the organization.
  """
  description: String

  """
  Avatar for the organization.
  """
  avatar: Upload

  """
  Name for the organization.
  """
  name: String!

  """
  Path for the organization.
  """
  path: String!
}

"""
Autogenerated return type of OrganizationCreate.
"""
type OrganizationCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Organization after mutation.
  """
  organization: Organization
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

"""
Values for sorting organizations
"""
enum OrganizationSort {
  """
  Name in ascending order.
  """
  NAME_ASC

  """
  Name in descending order.
  """
  NAME_DESC

  """
  Description in ascending order.
  """
  DESCRIPTION_ASC

  """
  Description in descending order.
  """
  DESCRIPTION_DESC

  """
  Default Rate in ascending order.
  """
  DEFAULT_RATE_ASC

  """
  Default Rate in descending order.
  """
  DEFAULT_RATE_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
Represents the total number of organizations for the represented states.
"""
type OrganizationStateCounts {
  """
  Number of organizations with state `ACTIVE`
  """
  active: Int

  """
  Number of organizations with state `ALL`
  """
  all: Int

  """
  Number of organizations with state `INACTIVE`
  """
  inactive: Int
}

"""
Autogenerated input type of OrganizationUpdate
"""
input OrganizationUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Description of the organization.
  """
  description: String

  """
  Avatar for the organization.
  """
  avatar: Upload

  """
  ID of the organization to mutate.
  """
  id: OrganizationsOrganizationID!

  """
  Name for the organization.
  """
  name: String

  """
  Path for the organization.
  """
  path: String
}

"""
Autogenerated return type of OrganizationUpdate.
"""
type OrganizationUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Organization after mutation.
  """
  organization: Organization
}

"""
A user with access to the organization.
"""
type OrganizationUser {
  """
  Access level of the user in the organization. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  accessLevel: OrganizationUserAccess!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")

  """
  Badges describing the user within the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  badges: [OrganizationUserBadge!]
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  ID of the organization user. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  id: ID!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Whether the user is the last owner of the organization. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  isLastOwner: Boolean!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")

  """
  User that is associated with the organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  user: UserCore!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  Permissions for the current user on the resource
  """
  userPermissions: OrganizationUserPermissions!
}

"""
Represents the access level of a relationship between a User and Organization that it is related to
"""
type OrganizationUserAccess {
  """
  Integer representation of access level. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  integerValue: Int
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")

  """
  String representation of access level. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  stringValue: OrganizationUserAccessLevel
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")
}

"""
Access level of an organization user
"""
enum OrganizationUserAccessLevel {
  """
  Guest access. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  DEFAULT
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")

  """
  Owner access. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  OWNER
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")
}

"""
An organization user badge.
"""
type OrganizationUserBadge {
  """
  Badge text.
  """
  text: String!

  """
  Badge variant.
  """
  variant: String!
}

"""
The connection type for OrganizationUser.
"""
type OrganizationUserConnection {
  """
  A list of edges.
  """
  edges: [OrganizationUserEdge]

  """
  A list of nodes.
  """
  nodes: [OrganizationUser]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrganizationUserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OrganizationUser
}

type OrganizationUserPermissions {
  """
  If `true`, the user can perform `delete_user` on this resource
  """
  deleteUser: Boolean!

  """
  If `true`, the user can perform `remove_user` on this resource
  """
  removeUser: Boolean!
}

"""
A `OrganizationsOrganizationID` is a global ID. It is encoded as a string.

An example `OrganizationsOrganizationID` is: `"gid://gitlab/Organizations::Organization/1"`.
"""
scalar OrganizationsOrganizationID

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Project {
  """
  Agent configurations defined by the project
  """
  agentConfigurations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AgentConfigurationConnection

  """
  If `only_allow_merge_if_pipeline_succeeds` is true, indicates if merge requests of the project can also be merged with skipped jobs.
  """
  allowMergeOnSkippedPipeline: Boolean

  """
  Project allows assigning multiple users to a merge request.
  """
  allowsMultipleMergeRequestAssignees: Boolean!

  """
  Project allows assigning multiple reviewers to a merge request.
  """
  allowsMultipleMergeRequestReviewers: Boolean!

  """
  Indicates the archived status of the project.
  """
  archived: Boolean

  """
  Indicates if issues referenced by merge requests and commits within the default branch are closed automatically.
  """
  autocloseReferencedIssues: Boolean

  """
  Search users for autocompletion
  """
  autocompleteUsers(
    """
    Query to search users by name, username, or public email.
    """
    search: String
  ): [AutocompletedUser!]

  """
  List of available deploy keys
  """
  availableDeployKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Term by which to search deploy key titles
    """
    titleQuery: String
  ): AccessLevelDeployKeyConnection

  """
  URL to avatar image file of the project.
  """
  avatarUrl: String

  """
  A single board of the project.
  """
  board(
    """
    ID of the board.
    """
    id: BoardID!
  ): Board

  """
  Boards of the project.
  """
  boards(
    """
    Find a board by its ID.
    """
    id: BoardID

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  Path of the CI configuration file.
  """
  ciConfigPathOrDefault: String

  """
  Indicates if Container Registry is enabled for the current user
  """
  containerRegistryEnabled: Boolean

  """
  Number of container repositories in the project.
  """
  containerRepositoriesCount: Int!

  """
  Timestamp of the project creation.
  """
  createdAt: Time

  """
  Data transfer data point for a specific period. This is mocked data under a development feature flag.
  """
  dataTransfer(
    """
    Retain egress data for one year. Data for the current month will increase dynamically as egress occurs.
    """
    from: Date

    """
    End date for the data.
    """
    to: Date
  ): ProjectDataTransfer

  """
  Short description of the project.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Detailed import status of the project.
  """
  detailedImportStatus: DetailedImportStatus

  """
  Flow metrics for value stream analytics. Introduced in GitLab 15.10: **Status**: Experiment.
  """
  flowMetrics: ProjectValueStreamAnalyticsFlowMetrics
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.10.")

  """
  Details of the fork project compared to its upstream project. Introduced in GitLab 15.7: **Status**: Experiment.
  """
  forkDetails(
    """
    Ref of the fork. Default value is HEAD.
    """
    ref: String
  ): ForkDetails
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.7.")

  """
  Namespaces in which the current user can fork the project into.
  """
  forkTargets(
    """
    Search query for path or name.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceConnection

  """
  Access level required for forking access.
  """
  forkingAccessLevel: ProjectFeatureAccess

  """
  Number of times the project has been forked.
  """
  forksCount: Int!

  """
  Full path of the project.
  """
  fullPath: ID!

  """
  Group of the project.
  """
  group: Group

  """
  URL to connect to the project via HTTPS.
  """
  httpUrlToRepo: String

  """
  ID of the project.
  """
  id: ID!

  """
  Status of import background job of the project.
  """
  importStatus: String

  """
  Incident Management Timeline event associated with the incident.
  """
  incidentManagementTimelineEvent(
    """
    ID of the incident.
    """
    incidentId: IssueID!

    """
    ID of the timeline event.
    """
    id: IncidentManagementTimelineEventID!
  ): TimelineEventType

  """
  Timeline event tags for the project.
  """
  incidentManagementTimelineEventTags: [TimelineEventTagType!]

  """
  Incident Management Timeline events associated with the incident.
  """
  incidentManagementTimelineEvents(
    """
    ID of the incident.
    """
    incidentId: IssueID!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelineEventTypeConnection

  """
  Indicates if a project is a catalog resource. Introduced in GitLab 15.11: **Status**: Experiment.
  """
  isCatalogResource: Boolean
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.11.")

  """
  Project is forked.
  """
  isForked: Boolean!

  """
  A single issue of the project.
  """
  issue(
    """
    Search query for title or description.
    """
    search: String

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after the date.
    """
    closedAfter: Time

    """
    Issues closed before the date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after the date.
    """
    createdAfter: Time

    """
    Issues created before the date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to the issue.
    """
    labelName: [String]

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    List of arguments with inclusive OR.
    """
    or: UnionedIssueFilterInput

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after the date.
    """
    updatedAfter: Time

    """
    Issues updated before the date.
    """
    updatedBefore: Time

    """
    Current state of the issue.
    """
    state: IssuableState

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]
  ): Issue

  """
  Counts of issues by status for the project.
  """
  issueStatusCounts(
    """
    Search query for title or description.
    """
    search: String

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after the date.
    """
    closedAfter: Time

    """
    Issues closed before the date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after the date.
    """
    createdAfter: Time

    """
    Issues created before the date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to the issue.
    """
    labelName: [String]

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    List of arguments with inclusive OR.
    """
    or: UnionedIssueFilterInput

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after the date.
    """
    updatedAfter: Time

    """
    Issues updated before the date.
    """
    updatedBefore: Time

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]
  ): IssueStatusCountsType

  """
  Issues of the project.
  """
  issues(
    """
    Search query for title or description.
    """
    search: String

    """
    Specify the fields to perform the search in.
    Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.'
    """
    in: [IssuableSearchableField!]

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after the date.
    """
    closedAfter: Time

    """
    Issues closed before the date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after the date.
    """
    createdAfter: Time

    """
    Issues created before the date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to the issue.
    """
    labelName: [String]

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    List of arguments with inclusive OR.
    """
    or: UnionedIssueFilterInput

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after the date.
    """
    updatedAfter: Time

    """
    Issues updated before the date.
    """
    updatedBefore: Time

    """
    Current state of the issue.
    """
    state: IssuableState

    """
    Release tag associated with the issue's milestone.
    """
    releaseTag: [String!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection

  """
  Access level required for issues access.
  """
  issuesAccessLevel: ProjectFeatureAccess

  """
  Indicates if Issues are enabled for the current user
  """
  issuesEnabled: Boolean

  """
  Status of Jira import background job of the project.
  """
  jiraImportStatus: String

  """
  Indicates if CI/CD pipeline jobs are enabled for the current user.
  """
  jobsEnabled: Boolean

  """
  Label available on this project.
  """
  label(
    """
    Title of the label.
    """
    title: String!
  ): Label

  """
  Labels available on this project.
  """
  labels(
    """
    Search term to find labels with.
    """
    searchTerm: String

    """
    Specify which fields to search in.
    """
    searchIn: [LabelSearchFieldList!]! = [TITLE, DESCRIPTION]

    """
    Include labels from ancestor groups.
    """
    includeAncestorGroups: Boolean = false

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Programming languages used in the project.
  """
  languages: [RepositoryLanguage!]

  """
  Timestamp of the project last activity.
  """
  lastActivityAt: Time

  """
  Indicates if the project has Large File Storage (LFS) enabled.
  """
  lfsEnabled: Boolean

  """
  The maximum access level of the current user in the project.
  """
  maxAccessLevel: AccessLevel!

  """
  Template used to create merge commit message in merge requests.
  """
  mergeCommitTemplate: String

  """
  A single merge request of the project.
  """
  mergeRequest(
    """
    IID of the merge request, for example `1`.
    """
    iid: String!
  ): MergeRequest

  """
  Merge requests of the project.
  """
  mergeRequests(
    """
    Search query for title or description.
    """
    search: String

    """
    Specify the fields to perform the search in.
    Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.'
    """
    in: [IssuableSearchableField!]

    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the reviewer.
    """
    reviewerUsername: String

    """
    Filter by reviewer presence. Incompatible with reviewerUsername.
    """
    reviewerWildcardId: ReviewerWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Access level required for merge requests access.
  """
  mergeRequestsAccessLevel: ProjectFeatureAccess

  """
  Indicates if Merge Requests are enabled for the current user
  """
  mergeRequestsEnabled: Boolean

  """
  Indicates if no merge commits should be created and all merges should instead be fast-forwarded, which means that merging is only allowed if the branch could be fast-forwarded.
  """
  mergeRequestsFfOnlyEnabled: Boolean

  """
  Name of the project (without namespace).
  """
  name: String!

  """
  Full name of the project with its namespace.
  """
  nameWithNamespace: String!

  """
  Namespace of the project.
  """
  namespace: Namespace

  """
  Indicates if merge requests of the project can only be merged when all the discussions are resolved.
  """
  onlyAllowMergeIfAllDiscussionsAreResolved: Boolean

  """
  Indicates if merge requests of the project can only be merged with successful jobs.
  """
  onlyAllowMergeIfPipelineSucceeds: Boolean

  """
  Number of open issues for the project.
  """
  openIssuesCount: Int

  """
  Number of open merge requests for the project.
  """
  openMergeRequestsCount: Int

  """
  Path for editing project at the organization level. Introduced in GitLab 16.11: **Status**: Experiment.
  """
  organizationEditPath: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.11.")

  """
  Path of the project.
  """
  path: String!

  """
  Indicates if a link to create or view a merge request should display after a push to Git repositories of the project from the command line.
  """
  printingMergeRequestLinkEnabled: Boolean

  """
  Members of the project.
  """
  projectMembers(
    """
    Search query.
    """
    search: String

    """
    sort query.
    """
    sort: MemberSort

    """
    Filter members by the given member relations.
    """
    relations: [ProjectMemberRelation!] = [DIRECT, INHERITED]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MemberInterfaceConnection

  """
  Plan limits for the current project. Introduced in GitLab 16.9: **Status**: Experiment.
  """
  projectPlanLimits: ProjectPlanLimits
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.9.")

  """
  Indicates if there is public access to pipelines and job details of the project, including output logs and artifacts.
  """
  publicJobs: Boolean

  """
  List of recently visited boards of the project. Maximum size is 4.
  """
  recentIssueBoards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BoardConnection

  """
  Git repository of the project.
  """
  repository: Repository

  """
  Indicates if users can request member access to the project.
  """
  requestAccessEnabled: Boolean

  """
  Detailed version of a Sentry error on the project.
  """
  sentryDetailedError(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryDetailedError

  """
  Paginated collection of Sentry errors on the project.
  """
  sentryErrors: SentryErrorCollection

  """
  E-mail address of the Service Desk.
  """
  serviceDeskAddress: String

  """
  Indicates if the project has Service Desk enabled.
  """
  serviceDeskEnabled: Boolean

  """
  Project services. Deprecated in GitLab 15.9: A `Project.integrations` field is proposed instead in [issue 389904](https://gitlab.com/gitlab-org/gitlab/-/issues/389904).
  """
  services(
    """
    Indicates if the integration is active.
    """
    active: Boolean

    """
    Type of integration.
    """
    type: ServiceType

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ServiceConnection
  @deprecated(
    reason: "A `Project.integrations` field is proposed instead in [issue 389904](https://gitlab.com/gitlab-org/gitlab/-/issues/389904). Deprecated in GitLab 15.9."
  )

  """
  Indicates if shared runners are enabled for the project.
  """
  sharedRunnersEnabled: Boolean

  """
  Snippets of the project.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Indicates if Snippets are enabled for the current user
  """
  snippetsEnabled: Boolean

  """
  Template used to create squash commit message in merge requests.
  """
  squashCommitTemplate: String

  """
  Indicates if `squashReadOnly` is enabled.
  """
  squashReadOnly: Boolean!

  """
  URL to connect to the project via SSH.
  """
  sshUrlToRepo: String

  """
  Number of times the project has been starred.
  """
  starCount: Int!

  """
  Statistics of the project.
  """
  statistics: ProjectStatistics

  """
  Redirects for Statistics of the project.
  """
  statisticsDetailsPaths: ProjectStatisticsRedirect

  """
  Commit message used to apply merge request suggestions.
  """
  suggestionCommitMessage: String

  """
  List of project topics (not Git tags). Deprecated in GitLab 13.12: Use `topics`.
  """
  tagList: String
  @deprecated(reason: "Use `topics`. Deprecated in GitLab 13.12.")

  """
  Timelog categories for the project. Introduced in GitLab 15.3: **Status**: Experiment.
  """
  timelogCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimeTrackingTimelogCategoryConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.3.")

  """
  Time logged on issues and merge requests in the project.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  List of project topics.
  """
  topics: [String!]

  """
  Timestamp of when the project was last updated.
  """
  updatedAt: Time

  """
  Permissions for the current user on the resource
  """
  userPermissions: ProjectPermissions!

  """
  Visibility of the project.
  """
  visibility: String

  """
  Visible forks of the project. Introduced in GitLab 15.10: **Status**: Experiment.
  """
  visibleForks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Minimum access level.
    """
    minimumAccessLevel: AccessLevelEnum
  ): ProjectConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.10.")

  """
  Web URL of the project.
  """
  webUrl: String

  """
  Indicates if Wikis are enabled for the current user
  """
  wikiEnabled: Boolean

  """
  Counts of work items by state for the project. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  workItemStateCounts(
    """
    Search query for title or description.
    """
    search: String

    """
    List of IIDs of work items. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Current state of the work item.
    """
    state: IssuableState

    """
    Filter work items by the given work item types.
    """
    types: [IssueType!]

    """
    IID of the work item. For example, "1".
    """
    iid: String
  ): WorkItemStateCountsType
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")

  """
  Work item types available to the project.
  """
  workItemTypes(
    """
    Filter work item types by the given name.
    """
    name: IssueType

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemTypeConnection

  """
  Work items of the project. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItems(
    """
    Search query for title or description.
    """
    search: String

    """
    List of IIDs of work items. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Current state of the work item.
    """
    state: IssuableState

    """
    Filter work items by the given work item types.
    """
    types: [IssueType!]

    """
    IID of the work item. For example, "1".
    """
    iid: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type ProjectDataTransfer {
  """
  Data nodes.
  """
  egressNodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EgressNodeConnection

  """
  Total egress for that project in that period of time.
  """
  totalEgress: BigInt
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

"""
Represents the access level required by the user to access a project feature
"""
type ProjectFeatureAccess {
  """
  Integer representation of access level.
  """
  integerValue: Int

  """
  String representation of access level.
  """
  stringValue: ProjectFeatureAccessLevel
}

"""
Access level of a project feature
"""
enum ProjectFeatureAccessLevel {
  """
  Not enabled for anyone.
  """
  DISABLED

  """
  Enabled only for team members.
  """
  PRIVATE

  """
  Enabled for everyone able to access the project.
  """
  ENABLED
}

"""
A `ProjectID` is a global ID. It is encoded as a string.

An example `ProjectID` is: `"gid://gitlab/Project/1"`.
"""
scalar ProjectID

"""
A `ProjectImportStateID` is a global ID. It is encoded as a string.

An example `ProjectImportStateID` is: `"gid://gitlab/ProjectImportState/1"`.
"""
scalar ProjectImportStateID

"""
Represents a Project Membership
"""
type ProjectMember implements MemberInterface {
  """
  GitLab::Access level.
  """
  accessLevel: AccessLevel

  """
  Date and time the membership was created.
  """
  createdAt: Time

  """
  User that authorized membership.
  """
  createdBy: UserCore

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  ID of the member.
  """
  id: ID!

  """
  Find a merge request.
  """
  mergeRequestInteraction(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): UserMergeRequestInteraction

  """
  Project that User is a member of.
  """
  project: Project

  """
  Date and time the membership was last updated.
  """
  updatedAt: Time

  """
  User that is associated with the member object.
  """
  user: UserCore

  """
  Permissions for the current user on the resource
  """
  userPermissions: ProjectPermissions!
}

"""
Autogenerated input type of ProjectMemberBulkUpdate
"""
input ProjectMemberBulkUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global IDs of the members.
  """
  userIds: [UserID!]!

  """
  Access level to update the members to.
  """
  accessLevel: MemberAccessLevel!

  """
  Date and time the membership expires.
  """
  expiresAt: Time

  """
  Global ID of the project.
  """
  projectId: ProjectID!
}

"""
Autogenerated return type of ProjectMemberBulkUpdate.
"""
type ProjectMemberBulkUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Project members after mutation.
  """
  projectMembers: [ProjectMember!]
}

"""
The connection type for ProjectMember.
"""
type ProjectMemberConnection {
  """
  A list of edges.
  """
  edges: [ProjectMemberEdge]

  """
  A list of nodes.
  """
  nodes: [ProjectMember]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProjectMemberEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProjectMember
}

"""
Project member relation
"""
enum ProjectMemberRelation {
  """
  Direct members
  """
  DIRECT

  """
  Inherited members
  """
  INHERITED

  """
  Descendants members
  """
  DESCENDANTS

  """
  Invited Groups members
  """
  INVITED_GROUPS

  """
  Shared Into Ancestors members
  """
  SHARED_INTO_ANCESTORS
}

type ProjectPermissions {
  """
  If `true`, the user can perform `admin_operations` on this resource
  """
  adminOperations: Boolean!

  """
  If `true`, the user can perform `admin_project` on this resource
  """
  adminProject: Boolean!

  """
  If `true`, the user can perform `admin_remote_mirror` on this resource
  """
  adminRemoteMirror: Boolean!

  """
  If `true`, the user can perform `admin_wiki` on this resource
  """
  adminWiki: Boolean!

  """
  If `true`, the user can perform `archive_project` on this resource
  """
  archiveProject: Boolean!

  """
  If `true`, the user can perform `change_namespace` on this resource
  """
  changeNamespace: Boolean!

  """
  If `true`, the user can perform `change_visibility_level` on this resource
  """
  changeVisibilityLevel: Boolean!

  """
  If `true`, the user can perform `create_deployment` on this resource
  """
  createDeployment: Boolean!

  """
  If `true`, the user can perform `create_design` on this resource
  """
  createDesign: Boolean!

  """
  If `true`, the user can perform `create_issue` on this resource
  """
  createIssue: Boolean!

  """
  If `true`, the user can perform `create_label` on this resource
  """
  createLabel: Boolean!

  """
  If `true`, the user can perform `create_merge_request_from` on this resource
  """
  createMergeRequestFrom: Boolean!

  """
  If `true`, the user can perform `create_merge_request_in` on this resource
  """
  createMergeRequestIn: Boolean!

  """
  If `true`, the user can perform `create_pages` on this resource
  """
  createPages: Boolean!

  """
  If `true`, the user can perform `create_pipeline` on this resource
  """
  createPipeline: Boolean!

  """
  If `true`, the user can perform `create_pipeline_schedule` on this resource
  """
  createPipelineSchedule: Boolean!

  """
  If `true`, the user can perform `create_snippet` on this resource
  """
  createSnippet: Boolean!

  """
  If `true`, the user can perform `create_wiki` on this resource
  """
  createWiki: Boolean!

  """
  If `true`, the user can perform `destroy_design` on this resource
  """
  destroyDesign: Boolean!

  """
  If `true`, the user can perform `destroy_pages` on this resource
  """
  destroyPages: Boolean!

  """
  If `true`, the user can perform `destroy_wiki` on this resource
  """
  destroyWiki: Boolean!

  """
  If `true`, the user can perform `download_code` on this resource
  """
  downloadCode: Boolean!

  """
  If `true`, the user can perform `download_wiki_code` on this resource
  """
  downloadWikiCode: Boolean!

  """
  If `true`, the user can perform `fork_project` on this resource
  """
  forkProject: Boolean!

  """
  If `true`, the user can perform `push_code` on this resource
  """
  pushCode: Boolean!

  """
  If `true`, the user can perform `read_commit_status` on this resource
  """
  readCommitStatus: Boolean!

  """
  If `true`, the user can perform `read_cycle_analytics` on this resource
  """
  readCycleAnalytics: Boolean!

  """
  If `true`, the user can perform `read_design` on this resource
  """
  readDesign: Boolean!

  """
  If `true`, the user can perform `read_environment` on this resource
  """
  readEnvironment: Boolean!

  """
  If `true`, the user can perform `read_merge_request` on this resource
  """
  readMergeRequest: Boolean!

  """
  If `true`, the user can perform `read_pages_content` on this resource
  """
  readPagesContent: Boolean!

  """
  If `true`, the user can perform `read_project` on this resource
  """
  readProject: Boolean!

  """
  If `true`, the user can perform `read_project_member` on this resource
  """
  readProjectMember: Boolean!

  """
  If `true`, the user can perform `read_wiki` on this resource
  """
  readWiki: Boolean!

  """
  If `true`, the user can perform `remove_fork_project` on this resource
  """
  removeForkProject: Boolean!

  """
  If `true`, the user can perform `remove_pages` on this resource
  """
  removePages: Boolean!

  """
  If `true`, the user can perform `remove_project` on this resource
  """
  removeProject: Boolean!

  """
  If `true`, the user can perform `rename_project` on this resource
  """
  renameProject: Boolean!

  """
  If `true`, the user can perform `request_access` on this resource
  """
  requestAccess: Boolean!

  """
  If `true`, the user can perform `update_pages` on this resource
  """
  updatePages: Boolean!

  """
  If `true`, the user can perform `update_wiki` on this resource
  """
  updateWiki: Boolean!

  """
  If `true`, the user can perform `upload_file` on this resource
  """
  uploadFile: Boolean!

  """
  If `true`, the user can perform `view_edit_page` on this resource
  """
  viewEditPage: Boolean!
}

"""
Plan limits for the current project.
"""
type ProjectPlanLimits {
  """
  Maximum number of pipeline schedules allowed per project.
  """
  ciPipelineSchedules: Int
}

"""
Values for sorting projects
"""
enum ProjectSort {
  """
  ID by ascending order.
  """
  ID_ASC

  """
  ID by descending order.
  """
  ID_DESC

  """
  Latest activity by ascending order.
  """
  LATEST_ACTIVITY_ASC

  """
  Latest activity by descending order.
  """
  LATEST_ACTIVITY_DESC

  """
  Name by ascending order.
  """
  NAME_ASC

  """
  Name by descending order.
  """
  NAME_DESC

  """
  Path by ascending order.
  """
  PATH_ASC

  """
  Path by descending order.
  """
  PATH_DESC

  """
  Stars by ascending order.
  """
  STARS_ASC

  """
  Stars by descending order.
  """
  STARS_DESC

  """
  Storage size by ascending order.
  """
  STORAGE_SIZE_ASC

  """
  Storage size by descending order.
  """
  STORAGE_SIZE_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

type ProjectStatistics {
  """
  Build artifacts size of the project in bytes.
  """
  buildArtifactsSize: Float!

  """
  Commit count of the project.
  """
  commitCount: Float!

  """
  Container Registry size of the project in bytes.
  """
  containerRegistrySize: Float

  """
  Large File Storage (LFS) object size of the project in bytes.
  """
  lfsObjectsSize: Float!

  """
  Packages size of the project in bytes.
  """
  packagesSize: Float!

  """
  CI Pipeline artifacts size in bytes.
  """
  pipelineArtifactsSize: Float

  """
  Repository size of the project in bytes.
  """
  repositorySize: Float!

  """
  Snippets size of the project in bytes.
  """
  snippetsSize: Float

  """
  Storage size of the project in bytes.
  """
  storageSize: Float!

  """
  Uploads size of the project in bytes.
  """
  uploadsSize: Float

  """
  Wiki size of the project in bytes.
  """
  wikiSize: Float
}

type ProjectStatisticsRedirect {
  """
  Redirection Route for job_artifacts.
  """
  buildArtifacts: String!

  """
  Redirection Route for container_registry.
  """
  containerRegistry: String!

  """
  Redirection Route for packages.
  """
  packages: String!

  """
  Redirection Route for repository.
  """
  repository: String!

  """
  Redirection Route for snippets.
  """
  snippets: String!

  """
  Redirection Route for wiki.
  """
  wiki: String!
}

"""
Autogenerated input type of ProjectSyncFork
"""
input ProjectSyncForkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project to initialize.
  """
  projectPath: ID!
}

"""
Autogenerated return type of ProjectSyncFork.
"""
type ProjectSyncForkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Updated fork details.
  """
  details: ForkDetails

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Exposes aggregated value stream flow metrics
"""
type ProjectValueStreamAnalyticsFlowMetrics {
  """
  Number of production deployments in the given period.
  """
  deploymentCount(
    """
    Timestamp marking the start date and time.
    """
    from: Time!

    """
    Timestamp marking the end date and time.
    """
    to: Time!
  ): ValueStreamAnalyticsMetric

  """
  Number of issues opened in the given period.
  """
  issueCount(
    """
    Timestamp marking the start date and time.
    """
    from: Time!

    """
    Timestamp marking the end date and time.
    """
    to: Time!

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Labels applied to the issue.
    """
    labelNames: [String!]
  ): ValueStreamAnalyticsMetric
}

type Query {
  """
  Abuse report labels. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  abuseReportLabels(
    """
    Search term to find labels with.
    """
    searchTerm: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")

  """
  Definitions for all audit events available on the instance.
  """
  auditEventDefinitions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AuditEventDefinitionConnection!

  """
  Find an issue board list.
  """
  boardList(
    """
    Global ID of the list.
    """
    id: ListID!

    """
    Filters applied when getting issue metadata in the board list.
    """
    issueFilters: BoardIssueInput
  ): BoardList

  """
  Get information about current user.
  """
  currentUser: CurrentUser

  """
  Testing endpoint to validate the API with
  """
  echo(
    """
    Text to echo back.
    """
    text: String!
  ): String!

  """
  Check if a feature flag is enabled Introduced in GitLab 17.1: **Status**: Experiment.
  """
  featureFlagEnabled(
    """
    Name of the feature flag.
    """
    name: String!
  ): Boolean!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.1.")

  """
  A user's frecently visited groups
  """
  frecentGroups: [Group!]

  """
  A user's frecently visited projects
  """
  frecentProjects: [Project!]

  """
  Whether Gitpod is enabled in application settings.
  """
  gitpodEnabled: Boolean

  """
  Find a group.
  """
  group(
    """
    Full path of the group. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Group

  """
  Find groups.
  """
  groups(
    """
    Filter groups by IDs.
    """
    ids: [ID!]

    """
    Only include top-level groups.
    """
    topLevelOnly: Boolean = false

    """
    Only include groups where the current user has an owner role.
    """
    ownedOnly: Boolean = false

    """
    Search query for group name or group full path.
    """
    search: String

    """
    Sort order of results. Format: `<field_name>_<sort_direction>`, for example: `id_desc` or `name_asc`
    """
    sort: String = "name_asc"

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  Find an issue.
  """
  issue(
    """
    Global ID of the issue.
    """
    id: IssueID!
  ): Issue

  """
  Find issues visible to the current user. At least one filter must be provided. Introduced in GitLab 15.6: **Status**: Experiment.
  """
  issues(
    """
    Search query for title or description.
    """
    search: String

    """
    Specify the fields to perform the search in.
    Defaults to `[TITLE, DESCRIPTION]`. Requires the `search` argument.'
    """
    in: [IssuableSearchableField!]

    """
    ID of a user assigned to the issues. Wildcard values "NONE" and "ANY" are supported.
    """
    assigneeId: String

    """
    Usernames of users assigned to the issue.
    """
    assigneeUsernames: [String!]

    """
    Filter by assignee wildcard. Incompatible with assigneeUsername and assigneeUsernames.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Username of the author of the issue.
    """
    authorUsername: String

    """
    Issues closed after the date.
    """
    closedAfter: Time

    """
    Issues closed before the date.
    """
    closedBefore: Time

    """
    Filter for confidential issues. If "false", excludes confidential issues. If "true", returns only confidential issues.
    """
    confidential: Boolean

    """
    Issues created after the date.
    """
    createdAfter: Time

    """
    Issues created before the date.
    """
    createdBefore: Time

    """
    ID of a contact assigned to the issues.
    """
    crmContactId: String

    """
    ID of an organization assigned to the issues.
    """
    crmOrganizationId: String

    """
    IID of the issue. For example, "1".
    """
    iid: String

    """
    List of IIDs of issues. For example, `["1", "2"]`.
    """
    iids: [String!]

    """
    Labels applied to the issue.
    """
    labelName: [String]

    """
    Filter by reaction emoji applied by the current user. Wildcard values "NONE" and "ANY" are supported.
    """
    myReactionEmoji: String

    """
    List of arguments with inclusive OR.
    """
    or: UnionedIssueFilterInput

    """
    Filter issues by the given issue types.
    """
    types: [IssueType!]

    """
    Issues updated after the date.
    """
    updatedAfter: Time

    """
    Issues updated before the date.
    """
    updatedBefore: Time

    """
    Whether to include issues from archived projects. Defaults to `false`.
    """
    includeArchived: Boolean = false

    """
    Current state of the issue.
    """
    state: IssuableState

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): IssueConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.6.")

  """
  Find a merge request.
  """
  mergeRequest(
    """
    Global ID of the merge request.
    """
    id: MergeRequestID!
  ): MergeRequest

  """
  Metadata about GitLab.
  """
  metadata: Metadata

  """
  Find a namespace.
  """
  namespace(
    """
    Full path of the namespace. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Namespace

  """
  Find a note. Introduced in GitLab 15.9: **Status**: Experiment.
  """
  note(
    """
    Global ID of the note.
    """
    id: NoteID!
  ): Note
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Find an organization. Introduced in GitLab 16.4: **Status**: Experiment.
  """
  organization(
    """
    ID of the organization.
    """
    id: OrganizationsOrganizationID!
  ): Organization
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.4.")

  """
  List organizations. Introduced in GitLab 16.8: **Status**: Experiment.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.8.")

  """
  Find a project.
  """
  project(
    """
    Full path of the project. For example, `gitlab-org/gitlab-foss`.
    """
    fullPath: ID!
  ): Project

  """
  Find projects visible to the current user.
  """
  projects(
    """
    Return only projects that the current user is a member of.
    """
    membership: Boolean

    """
    Search query, which can be for the project name, a path, or a description.
    """
    search: String

    """
    Include namespace in project search.
    """
    searchNamespaces: Boolean

    """
    Filter projects by topics.
    """
    topics: [String!]

    """
    Return only personal projects.
    """
    personal: Boolean

    """
    Sort order of results. Format: `<field_name>_<sort_direction>`, for example: `id_desc` or `name_asc`
    """
    sort: String = "id_desc"

    """
    Filter projects by IDs.
    """
    ids: [ID!]

    """
    Filter projects by full paths. You cannot provide more than 50 full paths.
    """
    fullPaths: [String!]

    """
    Return only projects with issues enabled.
    """
    withIssuesEnabled: Boolean

    """
    Return only projects with merge requests enabled.
    """
    withMergeRequestsEnabled: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Information about the complexity of the GraphQL query.
  """
  queryComplexity: QueryComplexity

  """
  Find Snippets visible to the current user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    ID of an author.
    """
    authorId: UserID

    """
    ID of a project.
    """
    projectId: ProjectID

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Explore personal snippets.
    """
    explore: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Find a synthetic note Introduced in GitLab 15.9: **Status**: Experiment.
  """
  syntheticNote(
    """
    Global ID of the note.
    """
    sha: String!

    """
    Global ID of the resource to search synthetic note on.
    """
    noteableId: NoteableID!
  ): Note
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Find timelogs visible to the current user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  Find project topics.
  """
  topics(
    """
    Search query for topic name.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TopicConnection

  """
  Get statistics on the instance.
  """
  usageTrendsMeasurements(
    """
    Type of measurement or statistics to retrieve.
    """
    identifier: MeasurementIdentifier!

    """
    Measurement recorded after the date.
    """
    recordedAfter: Time

    """
    Measurement recorded before the date.
    """
    recordedBefore: Time

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UsageTrendsMeasurementConnection

  """
  Find a user.
  """
  user(
    """
    ID of the User.
    """
    id: UserID

    """
    Username of the User.
    """
    username: String
  ): UserCore

  """
  Find users.
  """
  users(
    """
    List of user Global IDs.
    """
    ids: [ID!]

    """
    List of usernames.
    """
    usernames: [String!]

    """
    Query to search users by name, username, or primary email.
    """
    search: String

    """
    Return only admin users.
    """
    admins: Boolean = false

    """
    Return users member of a given group.
    """
    groupId: GroupID

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Find a work item. Introduced in GitLab 15.1: **Status**: Experiment.
  """
  workItem(
    """
    Global ID of the work item.
    """
    id: WorkItemID!
  ): WorkItem
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.1.")

  """
  Find work items by their reference. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  workItemsByReference(
    """
    Full path of the context namespace (project or group).
    """
    contextNamespacePath: ID

    """
    Work item references. Can be either a short reference or URL.
    """
    refs: [String!]!

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")
}

type QueryComplexity {
  """
  GraphQL query complexity limit.
  """
  limit: Int

  """
  GraphQL query complexity score.
  """
  score: Int
}

"""
Recent failure history of a test case.
"""
type RecentFailures {
  """
  Number of times the test case has failed in the past 14 days.
  """
  count: Int
}

"""
Type of ref
"""
enum RefType {
  """
  Ref type for branches.
  """
  HEADS

  """
  Ref type for tags.
  """
  TAGS
}

"""
The position to which the object should be moved
"""
enum RelativePositionType {
  """
  Object is moved before an adjacent object.
  """
  BEFORE

  """
  Object is moved after an adjacent object.
  """
  AFTER
}

type Repository {
  """
  Blobs contained within the repository
  """
  blobs(
    """
    Array of desired blob paths.
    """
    paths: [String!]!

    """
    Commit ref to get the blobs from. Default value is HEAD.
    """
    ref: String = null

    """
    Type of ref.
    """
    refType: RefType = null

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryBlobConnection

  """
  Names of branches available in this repository that match the search pattern.
  """
  branchNames(
    """
    Pattern to search for branch names by.
    """
    searchPattern: String!

    """
    Number of branch names to skip.
    """
    offset: Int!

    """
    Number of branch names to return.
    """
    limit: Int!
  ): [String!]

  """
  Shows a disk path of the repository.
  """
  diskPath: String

  """
  Indicates repository has no visible content.
  """
  empty: Boolean!

  """
  Indicates a corresponding Git repository exists on disk.
  """
  exists: Boolean!

  """
  Paginated tree of the repository.
  """
  paginatedTree(
    """
    Path to get the tree for. Default value is the root of the repository.
    """
    path: String = ""

    """
    Used to get a recursive tree. Default is false.
    """
    recursive: Boolean = false

    """
    Commit ref to get the tree for. Default value is HEAD.
    """
    ref: String

    """
    Type of ref.
    """
    refType: RefType

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TreeConnection

  """
  Default branch of the repository.
  """
  rootRef: String

  """
  Tree of the repository.
  """
  tree(
    """
    Path to get the tree for. Default value is the root of the repository.
    """
    path: String = ""

    """
    Used to get a recursive tree. Default is false.
    """
    recursive: Boolean = false

    """
    Commit ref to get the tree for. Default value is HEAD.
    """
    ref: String

    """
    Type of ref.
    """
    refType: RefType
  ): Tree
}

type RepositoryBlob {
  """
  Whether the current project is archived.
  """
  archived: Boolean

  """
  Content of blob is encoded base64. Returns `null` if the `unicode_escaped_data` feature flag is disabled. Introduced in GitLab 17.1: **Status**: Experiment.
  """
  base64EncodedBlob: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.1.")

  """
  Blob blame. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  blame(
    """
    Range starting from the line. Cannot be less than 1 or greater than `to_line`.
    """
    fromLine: Int = 1

    """
    Range ending on the line. Cannot be smaller than `from_line` or greater than `from_line` + 100.
    """
    toLine: Int = 1
  ): Blame
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")

  """
  Web path to blob blame page.
  """
  blamePath: String

  """
  Whether the current user can modify the blob.
  """
  canModifyBlob: Boolean

  """
  Web path for code navigation.
  """
  codeNavigationPath: String

  """
  Web path to edit the blob in the old-style editor.
  """
  editBlobPath: String

  """
  Web path to blob on an environment.
  """
  environmentExternalUrlForRouteMap: String

  """
  Environment on which the blob is available.
  """
  environmentFormattedExternalUrl: String

  """
  External storage being used, if enabled (for instance, 'LFS').
  """
  externalStorage: String

  """
  Web path to download the raw blob via external storage, if enabled.
  """
  externalStorageUrl: String

  """
  Expected format of the blob based on the extension.
  """
  fileType: String

  """
  Web path to find file.
  """
  findFilePath: String

  """
  Web path to edit this blob using a forked project.
  """
  forkAndEditPath: String

  """
  Web path to view this blob using a forked project.
  """
  forkAndViewPath: String

  """
  URL to the blob within Gitpod.
  """
  gitpodBlobUrl: String

  """
  Web path to blob history page.
  """
  historyPath: String

  """
  ID of the blob.
  """
  id: ID!

  """
  Web path to edit this blob in the Web IDE.
  """
  ideEditPath: String

  """
  Web path to edit this blob in the Web IDE using a forked project.
  """
  ideForkAndEditPath: String

  """
  Blob language.
  """
  language: String

  """
  LFS OID of the blob.
  """
  lfsOid: String

  """
  Blob mode.
  """
  mode: String

  """
  Blob name.
  """
  name: String

  """
  OID of the blob.
  """
  oid: String!

  """
  Path of the blob.
  """
  path: String!

  """
  Web path to blob permalink.
  """
  permalinkPath: String

  """
  Web path to edit .gitlab-ci.yml file.
  """
  pipelineEditorPath: String

  """
  Blob plain highlighted data.
  """
  plainData: String

  """
  Web path for the root of the blob.
  """
  projectBlobPathRoot: String

  """
  Raw content of the blob.
  """
  rawBlob: String

  """
  Web path to download the raw blob.
  """
  rawPath: String

  """
  Size (in bytes) of the blob, or the blob target if stored externally.
  """
  rawSize: BigInt

  """
  Raw content of the blob, if the blob is text data.
  """
  rawTextBlob: String

  """
  Web path to replace the blob content.
  """
  replacePath: String

  """
  Blob content rich viewer.
  """
  richViewer: BlobViewer

  """
  Blob content simple viewer.
  """
  simpleViewer: BlobViewer!

  """
  Size (in bytes) of the blob.
  """
  size: BigInt

  """
  Whether the blob's content is stored externally (for instance, in LFS).
  """
  storedExternally: Boolean

  """
  Web path of the blob.
  """
  webPath: String
}

"""
The connection type for RepositoryBlob.
"""
type RepositoryBlobConnection {
  """
  A list of edges.
  """
  edges: [RepositoryBlobEdge]

  """
  A list of nodes.
  """
  nodes: [RepositoryBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RepositoryBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RepositoryBlob
}

type RepositoryLanguage {
  """
  Color to visualize the repository language.
  """
  color: Color

  """
  Name of the repository language.
  """
  name: String!

  """
  Percentage of the repository's languages.
  """
  share: Float
}

interface ResolvableInterface {
  """
  Indicates if the object can be resolved.
  """
  resolvable: Boolean!

  """
  Indicates if the object is resolved.
  """
  resolved: Boolean!

  """
  Timestamp of when the object was resolved.
  """
  resolvedAt: Time

  """
  User who resolved the object.
  """
  resolvedBy: UserCore
}

"""
Reviewer ID wildcard values
"""
enum ReviewerWildcardId {
  """
  No reviewer is assigned.
  """
  NONE

  """
  Any reviewer is assigned.
  """
  ANY
}

type RootStorageStatistics {
  """
  CI artifacts size in bytes.
  """
  buildArtifactsSize: Float!

  """
  Container Registry size in bytes.
  """
  containerRegistrySize: Float!

  """
  Indicates whether the deduplicated Container Registry size for the namespace is an estimated value or not.
  """
  containerRegistrySizeIsEstimated: Boolean!

  """
  Dependency Proxy sizes in bytes.
  """
  dependencyProxySize: Float!

  """
  LFS objects size in bytes.
  """
  lfsObjectsSize: Float!

  """
  Packages size in bytes.
  """
  packagesSize: Float!

  """
  CI pipeline artifacts size in bytes.
  """
  pipelineArtifactsSize: Float!

  """
  Indicates whether the deduplicated Container Registry size for the namespace is an estimated value or not. Deprecated in GitLab 16.2: Use `container_registry_size_is_estimated`.
  """
  registrySizeEstimated: Boolean!
  @deprecated(
    reason: "Use `container_registry_size_is_estimated`. Deprecated in GitLab 16.2."
  )

  """
  Git repository size in bytes.
  """
  repositorySize: Float!

  """
  Snippets size in bytes.
  """
  snippetsSize: Float!

  """
  Total storage in bytes.
  """
  storageSize: Float!

  """
  Uploads size in bytes.
  """
  uploadsSize: Float!

  """
  Wiki size in bytes.
  """
  wikiSize: Float!
}

type SavedReply {
  """
  Content of the saved reply.
  """
  content: String!

  """
  Global ID of the user saved reply.
  """
  id: UsersSavedReplyID!

  """
  Name of the saved reply.
  """
  name: String!
}

"""
The connection type for SavedReply.
"""
type SavedReplyConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [SavedReplyEdge]

  """
  A list of nodes.
  """
  nodes: [SavedReply]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of SavedReplyCreate
"""
input SavedReplyCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the saved reply.
  """
  name: String!

  """
  Content of the saved reply.
  """
  content: String!
}

"""
Autogenerated return type of SavedReplyCreate.
"""
type SavedReplyCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

"""
Autogenerated input type of SavedReplyDestroy
"""
input SavedReplyDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the user saved reply.
  """
  id: UsersSavedReplyID!
}

"""
Autogenerated return type of SavedReplyDestroy.
"""
type SavedReplyDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

"""
An edge in a connection.
"""
type SavedReplyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SavedReply
}

"""
Autogenerated input type of SavedReplyUpdate
"""
input SavedReplyUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the saved reply.
  """
  name: String!

  """
  Content of the saved reply.
  """
  content: String!

  """
  Global ID of the user saved reply.
  """
  id: UsersSavedReplyID!
}

"""
Autogenerated return type of SavedReplyUpdate.
"""
type SavedReplyUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Saved reply after mutation.
  """
  savedReply: SavedReply
}

enum SecurityReportTypeEnum {
  """
  SAST scan report
  """
  SAST

  """
  SAST ADVANCED scan report
  """
  SAST_ADVANCED

  """
  SAST IAC scan report
  """
  SAST_IAC

  """
  BREACH AND ATTACK SIMULATION scan report
  """
  BREACH_AND_ATTACK_SIMULATION

  """
  DAST scan report
  """
  DAST

  """
  DEPENDENCY SCANNING scan report
  """
  DEPENDENCY_SCANNING

  """
  CONTAINER SCANNING scan report
  """
  CONTAINER_SCANNING

  """
  SECRET DETECTION scan report
  """
  SECRET_DETECTION

  """
  COVERAGE FUZZING scan report
  """
  COVERAGE_FUZZING

  """
  API FUZZING scan report
  """
  API_FUZZING

  """
  CLUSTER IMAGE SCANNING scan report
  """
  CLUSTER_IMAGE_SCANNING
}

"""
A Sentry error
"""
type SentryDetailedError {
  """
  Count of occurrences.
  """
  count: Int!

  """
  Culprit of the error.
  """
  culprit: String!

  """
  External Base URL of the Sentry Instance.
  """
  externalBaseUrl: String!

  """
  External URL of the error.
  """
  externalUrl: String!

  """
  Commit the error was first seen.
  """
  firstReleaseLastCommit: String

  """
  Release short version the error was first seen.
  """
  firstReleaseShortVersion: String

  """
  Release version the error was first seen.
  """
  firstReleaseVersion: String

  """
  Timestamp when the error was first seen.
  """
  firstSeen: Time!

  """
  Last 24hr stats of the error.
  """
  frequency: [SentryErrorFrequency!]!

  """
  GitLab commit SHA attributed to the Error based on the release version.
  """
  gitlabCommit: String

  """
  Path to the GitLab page for the GitLab commit attributed to the error.
  """
  gitlabCommitPath: String

  """
  URL of GitLab Issue.
  """
  gitlabIssuePath: String

  """
  ID (global ID) of the error.
  """
  id: ID!

  """
  Error tracking backend.
  """
  integrated: Boolean

  """
  Commit the error was last seen.
  """
  lastReleaseLastCommit: String

  """
  Release short version the error was last seen.
  """
  lastReleaseShortVersion: String

  """
  Release version the error was last seen.
  """
  lastReleaseVersion: String

  """
  Timestamp when the error was last seen.
  """
  lastSeen: Time!

  """
  Sentry metadata message of the error.
  """
  message: String

  """
  ID (Sentry ID) of the error.
  """
  sentryId: String!

  """
  ID of the project (Sentry project).
  """
  sentryProjectId: ID!

  """
  Name of the project affected by the error.
  """
  sentryProjectName: String!

  """
  Slug of the project affected by the error.
  """
  sentryProjectSlug: String!

  """
  Short ID (Sentry ID) of the error.
  """
  shortId: String!

  """
  Status of the error.
  """
  status: SentryErrorStatus!

  """
  Tags associated with the Sentry Error.
  """
  tags: SentryErrorTags!

  """
  Title of the error.
  """
  title: String!

  """
  Type of the error.
  """
  type: String!

  """
  Count of users affected by the error.
  """
  userCount: Int!
}

"""
A Sentry error. A simplified version of SentryDetailedError
"""
type SentryError {
  """
  Count of occurrences.
  """
  count: Int!

  """
  Culprit of the error.
  """
  culprit: String!

  """
  External URL of the error.
  """
  externalUrl: String!

  """
  Timestamp when the error was first seen.
  """
  firstSeen: Time!

  """
  Last 24hr stats of the error.
  """
  frequency: [SentryErrorFrequency!]!

  """
  ID (global ID) of the error.
  """
  id: ID!

  """
  Timestamp when the error was last seen.
  """
  lastSeen: Time!

  """
  Sentry metadata message of the error.
  """
  message: String

  """
  ID (Sentry ID) of the error.
  """
  sentryId: String!

  """
  ID of the project (Sentry project).
  """
  sentryProjectId: ID!

  """
  Name of the project affected by the error.
  """
  sentryProjectName: String!

  """
  Slug of the project affected by the error.
  """
  sentryProjectSlug: String!

  """
  Short ID (Sentry ID) of the error.
  """
  shortId: String!

  """
  Status of the error.
  """
  status: SentryErrorStatus!

  """
  Title of the error.
  """
  title: String!

  """
  Type of the error.
  """
  type: String!

  """
  Count of users affected by the error.
  """
  userCount: Int!
}

"""
An object containing a collection of Sentry errors, and a detailed error
"""
type SentryErrorCollection {
  """
  Detailed version of a Sentry error on the project.
  """
  detailedError(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryDetailedError

  """
  Stack Trace of Sentry Error.
  """
  errorStackTrace(
    """
    ID of the Sentry issue.
    """
    id: GitlabErrorTrackingDetailedErrorID!
  ): SentryErrorStackTrace

  """
  Collection of Sentry Errors.
  """
  errors(
    """
    Search query for the Sentry error details.
    """
    searchTerm: String

    """
    Attribute to sort on. Options are frequency, first_seen, last_seen. last_seen is default.
    """
    sort: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SentryErrorConnection

  """
  External URL for Sentry.
  """
  externalUrl: String
}

"""
The connection type for SentryError.
"""
type SentryErrorConnection {
  """
  A list of edges.
  """
  edges: [SentryErrorEdge]

  """
  A list of nodes.
  """
  nodes: [SentryError]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SentryErrorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SentryError
}

type SentryErrorFrequency {
  """
  Count of errors received since the previously recorded time.
  """
  count: Int!

  """
  Time the error frequency stats were recorded.
  """
  time: Time!
}

"""
An object containing a stack trace entry for a Sentry error
"""
type SentryErrorStackTrace {
  """
  Time the stack trace was received by Sentry.
  """
  dateReceived: String!

  """
  ID of the Sentry error.
  """
  issueId: String!

  """
  Stack trace entries for the Sentry error.
  """
  stackTraceEntries: [SentryErrorStackTraceEntry!]!
}

"""
An object context for a Sentry error stack trace
"""
type SentryErrorStackTraceContext {
  """
  Code number of the context.
  """
  code: String!

  """
  Line number of the context.
  """
  line: Int!
}

"""
An object containing a stack trace entry for a Sentry error
"""
type SentryErrorStackTraceEntry {
  """
  Function in which the Sentry error occurred.
  """
  col: String

  """
  File in which the Sentry error occurred.
  """
  fileName: String

  """
  Function in which the Sentry error occurred.
  """
  function: String

  """
  Function in which the Sentry error occurred.
  """
  line: String

  """
  Context of the Sentry error.
  """
  traceContext: [SentryErrorStackTraceContext!]
}

"""
State of a Sentry error
"""
enum SentryErrorStatus {
  """
  Error has been resolved.
  """
  RESOLVED

  """
  Error has been ignored until next release.
  """
  RESOLVED_IN_NEXT_RELEASE

  """
  Error is unresolved.
  """
  UNRESOLVED

  """
  Error has been ignored.
  """
  IGNORED
}

"""
State of a Sentry error
"""
type SentryErrorTags {
  """
  Severity level of the Sentry Error.
  """
  level: String

  """
  Logger of the Sentry Error.
  """
  logger: String
}

interface Service {
  """
  Indicates if the service is active.
  """
  active: Boolean

  """
  Type of the service.
  """
  serviceType: ServiceType

  """
  Class name of the service.
  """
  type: String
}

"""
The connection type for Service.
"""
type ServiceConnection {
  """
  A list of edges.
  """
  edges: [ServiceEdge]

  """
  A list of nodes.
  """
  nodes: [Service]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ServiceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Service
}

enum ServiceType {
  """
  AppleAppStoreService type
  """
  APPLE_APP_STORE_SERVICE

  """
  AsanaService type
  """
  ASANA_SERVICE

  """
  AssemblaService type
  """
  ASSEMBLA_SERVICE

  """
  BambooService type
  """
  BAMBOO_SERVICE

  """
  BugzillaService type
  """
  BUGZILLA_SERVICE

  """
  BuildkiteService type
  """
  BUILDKITE_SERVICE

  """
  CampfireService type
  """
  CAMPFIRE_SERVICE

  """
  ClickupService type
  """
  CLICKUP_SERVICE

  """
  ConfluenceService type
  """
  CONFLUENCE_SERVICE

  """
  CustomIssueTrackerService type
  """
  CUSTOM_ISSUE_TRACKER_SERVICE

  """
  DatadogService type
  """
  DATADOG_SERVICE

  """
  DiffblueCoverService type
  """
  DIFFBLUE_COVER_SERVICE

  """
  DiscordService type
  """
  DISCORD_SERVICE

  """
  DroneCiService type
  """
  DRONE_CI_SERVICE

  """
  EmailsOnPushService type
  """
  EMAILS_ON_PUSH_SERVICE

  """
  EwmService type
  """
  EWM_SERVICE

  """
  ExternalWikiService type
  """
  EXTERNAL_WIKI_SERVICE

  """
  GooglePlayService type
  """
  GOOGLE_PLAY_SERVICE

  """
  HangoutsChatService type
  """
  HANGOUTS_CHAT_SERVICE

  """
  HarborService type
  """
  HARBOR_SERVICE

  """
  IrkerService type
  """
  IRKER_SERVICE

  """
  JenkinsService type
  """
  JENKINS_SERVICE

  """
  JiraService type
  """
  JIRA_SERVICE

  """
  MattermostService type
  """
  MATTERMOST_SERVICE

  """
  MattermostSlashCommandsService type
  """
  MATTERMOST_SLASH_COMMANDS_SERVICE

  """
  MicrosoftTeamsService type
  """
  MICROSOFT_TEAMS_SERVICE

  """
  PackagistService type
  """
  PACKAGIST_SERVICE

  """
  PhorgeService type
  """
  PHORGE_SERVICE

  """
  PipelinesEmailService type
  """
  PIPELINES_EMAIL_SERVICE

  """
  PivotaltrackerService type
  """
  PIVOTALTRACKER_SERVICE

  """
  PrometheusService type
  """
  PROMETHEUS_SERVICE

  """
  PumbleService type
  """
  PUMBLE_SERVICE

  """
  PushoverService type
  """
  PUSHOVER_SERVICE

  """
  RedmineService type
  """
  REDMINE_SERVICE

  """
  SlackService type
  """
  SLACK_SERVICE

  """
  SlackSlashCommandsService type
  """
  SLACK_SLASH_COMMANDS_SERVICE

  """
  SquashTmService type
  """
  SQUASH_TM_SERVICE

  """
  TeamcityService type
  """
  TEAMCITY_SERVICE

  """
  TelegramService type
  """
  TELEGRAM_SERVICE

  """
  UnifyCircuitService type
  """
  UNIFY_CIRCUIT_SERVICE

  """
  WebexTeamsService type
  """
  WEBEX_TEAMS_SERVICE

  """
  YoutrackService type
  """
  YOUTRACK_SERVICE

  """
  ZentaoService type
  """
  ZENTAO_SERVICE
}

"""
How to format SHA strings.
"""
enum ShaFormat {
  """
  Abbreviated format. Short SHAs are typically eight characters long.
  """
  SHORT

  """
  Unabbreviated format.
  """
  LONG
}

enum SharedRunnersSetting {
  """
  Sharing of runners is disabled and unoverridable.
  """
  DISABLED_AND_UNOVERRIDABLE

  """
  Sharing of runners is disabled and overridable.
  """
  DISABLED_AND_OVERRIDABLE

  """
  Sharing of runners is enabled.
  """
  ENABLED
}

"""
Represents a snippet entry
"""
type Snippet implements NoteableInterface {
  """
  Owner of the snippet.
  """
  author: UserCore

  """
  Snippet blobs.
  """
  blobs(
    """
    Paths of the blobs.
    """
    paths: [String!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetBlobConnection

  """
  All commenters on this noteable.
  """
  commenters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection!

  """
  Timestamp this snippet was created.
  """
  createdAt: Time!

  """
  Description of the snippet.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  All discussions on this noteable.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionConnection!

  """
  File Name of the snippet.
  """
  fileName: String

  """
  Indicates the snippet is hidden because the author has been banned.
  """
  hidden: Boolean!

  """
  HTTP URL to the snippet repository.
  """
  httpUrlToRepo: String

  """
  ID of the snippet.
  """
  id: SnippetID!

  """
  Indicates whether the snippet was imported.
  """
  imported: Boolean!

  """
  Import source of the snippet.
  """
  importedFrom: ImportSource!

  """
  All notes on this noteable.
  """
  notes(
    """
    Type of notes collection: ALL_NOTES, ONLY_COMMENTS, ONLY_ACTIVITY.
    """
    filter: NotesFilterType = ALL_NOTES

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NoteConnection!

  """
  Project the snippet is associated with.
  """
  project: Project

  """
  Raw URL of the snippet.
  """
  rawUrl: String!

  """
  SSH URL to the snippet repository.
  """
  sshUrlToRepo: String

  """
  Title of the snippet.
  """
  title: String!

  """
  Timestamp this snippet was updated.
  """
  updatedAt: Time!

  """
  Permissions for the current user on the resource
  """
  userPermissions: SnippetPermissions!

  """
  Visibility Level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum!

  """
  Web URL of the snippet.
  """
  webUrl: String!
}

"""
Represents the snippet blob
"""
type SnippetBlob {
  """
  Shows whether the blob is binary.
  """
  binary: Boolean!

  """
  Blob external storage.
  """
  externalStorage: String

  """
  Blob mode.
  """
  mode: String

  """
  Blob name.
  """
  name: String

  """
  Blob path.
  """
  path: String

  """
  Blob plain highlighted data.
  """
  plainData: String

  """
  Blob raw content endpoint path.
  """
  rawPath: String!

  """
  Raw content of the blob, if the blob is text data.
  """
  rawPlainData: String

  """
  Shows whether the blob is rendered as text.
  """
  renderedAsText: Boolean!

  """
  Blob highlighted data.
  """
  richData: String

  """
  Blob content rich viewer.
  """
  richViewer: SnippetBlobViewer

  """
  Blob content simple viewer.
  """
  simpleViewer: SnippetBlobViewer!

  """
  Blob size.
  """
  size: Int!
}

"""
Type of a snippet blob input action
"""
enum SnippetBlobActionEnum {
  """
  Create a snippet blob.
  """
  create

  """
  Update a snippet blob.
  """
  update

  """
  Delete a snippet blob.
  """
  delete

  """
  Move a snippet blob.
  """
  move
}

"""
Represents an action to perform over a snippet file
"""
input SnippetBlobActionInputType {
  """
  Type of input action.
  """
  action: SnippetBlobActionEnum!

  """
  Previous path of the snippet file.
  """
  previousPath: String

  """
  Path of the snippet file.
  """
  filePath: String!

  """
  Snippet file content.
  """
  content: String
}

"""
The connection type for SnippetBlob.
"""
type SnippetBlobConnection {
  """
  A list of edges.
  """
  edges: [SnippetBlobEdge]

  """
  Indicates if the snippet has unretrievable blobs.
  """
  hasUnretrievableBlobs: Boolean!

  """
  A list of nodes.
  """
  nodes: [SnippetBlob]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SnippetBlobEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SnippetBlob
}

"""
Represents how the blob content should be displayed
"""
type SnippetBlobViewer {
  """
  Shows whether the blob should be displayed collapsed.
  """
  collapsed: Boolean!

  """
  Content file type.
  """
  fileType: String!

  """
  Shows whether the blob content is loaded asynchronously.
  """
  loadAsync: Boolean!

  """
  Loading partial name.
  """
  loadingPartialName: String!

  """
  Error rendering the blob content.
  """
  renderError: String

  """
  Shows whether the blob is too large to be displayed.
  """
  tooLarge: Boolean!

  """
  Type of blob viewer.
  """
  type: BlobViewersType!
}

"""
The connection type for Snippet.
"""
type SnippetConnection {
  """
  A list of edges.
  """
  edges: [SnippetEdge]

  """
  A list of nodes.
  """
  nodes: [Snippet]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SnippetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Snippet
}

"""
A `SnippetID` is a global ID. It is encoded as a string.

An example `SnippetID` is: `"gid://gitlab/Snippet/1"`.
"""
scalar SnippetID

type SnippetPermissions {
  """
  If `true`, the user can perform `admin_snippet` on this resource
  """
  adminSnippet: Boolean!

  """
  If `true`, the user can perform `award_emoji` on this resource
  """
  awardEmoji: Boolean!

  """
  If `true`, the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  If `true`, the user can perform `read_snippet` on this resource
  """
  readSnippet: Boolean!

  """
  If `true`, the user can perform `report_snippet` on this resource
  """
  reportSnippet: Boolean!

  """
  If `true`, the user can perform `update_snippet` on this resource
  """
  updateSnippet: Boolean!
}

"""
Common sort values
"""
enum Sort {
  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
Values for sort direction
"""
enum SortDirectionEnum {
  """
  Ascending order.
  """
  ASC

  """
  Descending order.
  """
  DESC
}

"""
Autogenerated input type of StarProject
"""
input StarProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project to star or unstar.
  """
  projectId: ProjectID!

  """
  Indicates whether to star or unstar the project.
  """
  starred: Boolean!
}

"""
Autogenerated return type of StarProject.
"""
type StarProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Number of stars for the project.
  """
  count: String!

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

type StatusAction {
  """
  Title for the button, for example: Retry this job.
  """
  buttonTitle: String

  """
  Custom confirmation message for a manual job. Introduced in GitLab 17.0: **Status**: Experiment.
  """
  confirmationMessage: String
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 17.0.")

  """
  Icon used in the action button.
  """
  icon: String

  """
  ID for a status action.
  """
  id: String!

  """
  Method for the action, for example: :post.
  """
  method: String

  """
  Path for the action.
  """
  path: String

  """
  Title for the action, for example: Retry.
  """
  title: String
}

type Submodule implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Tree URL for the sub-module.
  """
  treeUrl: String

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web URL for the sub-module.
  """
  webUrl: String
}

"""
The connection type for Submodule.
"""
type SubmoduleConnection {
  """
  A list of edges.
  """
  edges: [SubmoduleEdge]

  """
  A list of nodes.
  """
  nodes: [Submodule]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SubmoduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Submodule
}

type Subscription {
  """
  Triggered when the assignees of an issuable are updated.
  """
  issuableAssigneesUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the due date or start date of an issuable is updated.
  """
  issuableDatesUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the description of an issuable is updated.
  """
  issuableDescriptionUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the labels of an issuable are updated.
  """
  issuableLabelsUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the title of an issuable is updated.
  """
  issuableTitleUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when approval state of a merge request is updated.
  """
  mergeRequestApprovalStateUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the merge status of a merge request is updated.
  """
  mergeRequestMergeStatusUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when the reviewers of a merge request are updated.
  """
  mergeRequestReviewersUpdated(
    """
    ID of the issuable.
    """
    issuableId: IssuableID!
  ): Issuable

  """
  Triggered when a note is created. Introduced in GitLab 15.9: **Status**: Experiment.
  """
  workItemNoteCreated(
    """
    ID of the noteable.
    """
    noteableId: NoteableID
  ): Note
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Triggered when a note is deleted. Introduced in GitLab 15.9: **Status**: Experiment.
  """
  workItemNoteDeleted(
    """
    ID of the noteable.
    """
    noteableId: NoteableID
  ): DeletedNote
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Triggered when a note is updated. Introduced in GitLab 15.9: **Status**: Experiment.
  """
  workItemNoteUpdated(
    """
    ID of the noteable.
    """
    noteableId: NoteableID
  ): Note
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Triggered when a work item is updated.
  """
  workItemUpdated(
    """
    ID of the work item.
    """
    workItemId: WorkItemID!
  ): WorkItem
}

"""
Completion status of tasks
"""
type TaskCompletionStatus {
  """
  Number of completed tasks.
  """
  completedCount: Int!

  """
  Number of total tasks.
  """
  count: Int!
}

"""
Time represented in ISO 8601.

For example: "2021-03-09T14:58:50+00:00".

See `https://www.iso.org/iso-8601-date-and-time-format.html`.
"""
scalar Time

type TimeTrackingTimelogCategory {
  """
  Whether the category is billable or not.
  """
  billable: Boolean

  """
  Billing rate for the category.
  """
  billingRate: Float

  """
  Color assigned to the category.
  """
  color: Color

  """
  When the category was created.
  """
  createdAt: Time!

  """
  Description of the category.
  """
  description: String

  """
  Internal ID of the timelog category.
  """
  id: ID!

  """
  Name of the category.
  """
  name: String!

  """
  When the category was last updated.
  """
  updatedAt: Time!
}

"""
The connection type for TimeTrackingTimelogCategory.
"""
type TimeTrackingTimelogCategoryConnection {
  """
  A list of edges.
  """
  edges: [TimeTrackingTimelogCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [TimeTrackingTimelogCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TimeTrackingTimelogCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimeTrackingTimelogCategory
}

"""
A time-frame defined as a closed inclusive range of two dates
"""
input Timeframe {
  """
  Start of the range.
  """
  start: Date!

  """
  End of the range.
  """
  end: Date!
}

"""
Autogenerated input type of TimelineEventCreate
"""
input TimelineEventCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Incident ID of the timeline event.
  """
  incidentId: IssueID!

  """
  Text note of the timeline event.
  """
  note: String!

  """
  Timestamp of when the event occurred.
  """
  occurredAt: Time!

  """
  Tags for the incident timeline event.
  """
  timelineEventTagNames: [String!]
}

"""
Autogenerated return type of TimelineEventCreate.
"""
type TimelineEventCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Autogenerated input type of TimelineEventDestroy
"""
input TimelineEventDestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Timeline event ID to remove.
  """
  id: IncidentManagementTimelineEventID!
}

"""
Autogenerated return type of TimelineEventDestroy.
"""
type TimelineEventDestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Autogenerated input type of TimelineEventPromoteFromNote
"""
input TimelineEventPromoteFromNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Note ID from which the timeline event promoted.
  """
  noteId: NoteID!
}

"""
Autogenerated return type of TimelineEventPromoteFromNote.
"""
type TimelineEventPromoteFromNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

"""
Autogenerated input type of TimelineEventTagCreate
"""
input TimelineEventTagCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project to create the timeline event tag in.
  """
  projectPath: ID!

  """
  Name of the tag.
  """
  name: String!
}

"""
Autogenerated return type of TimelineEventTagCreate.
"""
type TimelineEventTagCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event tag.
  """
  timelineEventTag: TimelineEventTagType
}

"""
Describes a tag on an incident management timeline event.
"""
type TimelineEventTagType {
  """
  ID of the timeline event tag.
  """
  id: IncidentManagementTimelineEventTagID!

  """
  Name of the timeline event tag.
  """
  name: String!
}

"""
The connection type for TimelineEventTagType.
"""
type TimelineEventTagTypeConnection {
  """
  A list of edges.
  """
  edges: [TimelineEventTagTypeEdge]

  """
  A list of nodes.
  """
  nodes: [TimelineEventTagType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TimelineEventTagTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimelineEventTagType
}

"""
Describes an incident management timeline event
"""
type TimelineEventType {
  """
  Indicates the timeline event icon.
  """
  action: String!

  """
  User that created the timeline event.
  """
  author: UserCore

  """
  Timestamp when the event created.
  """
  createdAt: Time!

  """
  Indicates the timeline event is editable.
  """
  editable: Boolean!

  """
  ID of the timeline event.
  """
  id: IncidentManagementTimelineEventID!

  """
  Incident of the timeline event.
  """
  incident: Issue!

  """
  Text note of the timeline event.
  """
  note: String

  """
  HTML note of the timeline event.
  """
  noteHtml: String

  """
  Timestamp when the event occurred.
  """
  occurredAt: Time!

  """
  Note from which the timeline event was created.
  """
  promotedFromNote: Note

  """
  Tags for the incident timeline event.
  """
  timelineEventTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelineEventTagTypeConnection

  """
  Timestamp when the event updated.
  """
  updatedAt: Time!

  """
  User that updated the timeline event.
  """
  updatedByUser: UserCore
}

"""
The connection type for TimelineEventType.
"""
type TimelineEventTypeConnection {
  """
  A list of edges.
  """
  edges: [TimelineEventTypeEdge]

  """
  A list of nodes.
  """
  nodes: [TimelineEventType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TimelineEventTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TimelineEventType
}

"""
Autogenerated input type of TimelineEventUpdate
"""
input TimelineEventUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the timeline event to update.
  """
  id: IncidentManagementTimelineEventID!

  """
  Text note of the timeline event.
  """
  note: String

  """
  Timestamp when the event occurred.
  """
  occurredAt: Time

  """
  Tags for the incident timeline event.
  """
  timelineEventTagNames: [String!]
}

"""
Autogenerated return type of TimelineEventUpdate.
"""
type TimelineEventUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timeline event.
  """
  timelineEvent: TimelineEventType
}

type Timelog {
  """
  Internal ID of the timelog.
  """
  id: ID!

  """
  Issue that logged time was added to.
  """
  issue: Issue

  """
  Merge request that logged time was added to.
  """
  mergeRequest: MergeRequest

  """
  Note where the quick action was executed to add the logged time.
  """
  note: Note

  """
  Target project of the timelog merge request or issue.
  """
  project: Project!

  """
  Timestamp of when the time tracked was spent at.
  """
  spentAt: Time

  """
  Summary of how the time was spent.
  """
  summary: String

  """
  Time spent displayed in seconds.
  """
  timeSpent: Int!

  """
  User that logged the time.
  """
  user: UserCore!

  """
  Permissions for the current user on the resource
  """
  userPermissions: TimelogPermissions!
}

"""
The connection type for Timelog.
"""
type TimelogConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [TimelogEdge]

  """
  A list of nodes.
  """
  nodes: [Timelog]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total time spent in seconds.
  """
  totalSpentTime: BigInt!
}

"""
Autogenerated input type of TimelogCreate
"""
input TimelogCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Amount of time spent.
  """
  timeSpent: String!

  """
  Timestamp of when the time was spent. If empty, defaults to current time.
  """
  spentAt: Time

  """
  Summary of time spent.
  """
  summary: String!

  """
  Global ID of the issuable (Issue, WorkItem or MergeRequest).
  """
  issuableId: IssuableID!
}

"""
Autogenerated return type of TimelogCreate.
"""
type TimelogCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timelog.
  """
  timelog: Timelog
}

"""
Autogenerated input type of TimelogDelete
"""
input TimelogDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the timelog.
  """
  id: TimelogID!
}

"""
Autogenerated return type of TimelogDelete.
"""
type TimelogDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Timelog.
  """
  timelog: Timelog
}

"""
An edge in a connection.
"""
type TimelogEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Timelog
}

"""
A `TimelogID` is a global ID. It is encoded as a string.

An example `TimelogID` is: `"gid://gitlab/Timelog/1"`.
"""
scalar TimelogID

type TimelogPermissions {
  """
  If `true`, the user can perform `admin_timelog` on this resource
  """
  adminTimelog: Boolean!
}

"""
Values for sorting timelogs
"""
enum TimelogSort {
  """
  Spent at ascending order.
  """
  SPENT_AT_ASC

  """
  Spent at descending order.
  """
  SPENT_AT_DESC

  """
  Time spent ascending order.
  """
  TIME_SPENT_ASC

  """
  Time spent descending order.
  """
  TIME_SPENT_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

interface Todoable {
  """
  URL of this object.
  """
  webUrl: String
}

type Topic {
  """
  URL to avatar image file of the topic.
  """
  avatarUrl: String

  """
  Description of the topic.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  ID of the topic.
  """
  id: ID!

  """
  Name of the topic.
  """
  name: String!

  """
  Title of the topic.
  """
  title: String!
}

"""
The connection type for Topic.
"""
type TopicConnection {
  """
  A list of edges.
  """
  edges: [TopicEdge]

  """
  A list of nodes.
  """
  nodes: [Topic]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TopicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Topic
}

type Tree {
  """
  Blobs of the tree.
  """
  blobs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BlobConnection!

  """
  Sub-modules of the tree.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Trees of the tree.
  """
  trees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TreeEntryConnection!
}

"""
The connection type for Tree.
"""
type TreeConnection {
  """
  A list of edges.
  """
  edges: [TreeEdge]

  """
  A list of nodes.
  """
  nodes: [Tree]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TreeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tree
}

"""
Represents a directory
"""
type TreeEntry implements Entry {
  """
  Flat path of the entry.
  """
  flatPath: String!

  """
  ID of the entry.
  """
  id: ID!

  """
  Name of the entry.
  """
  name: String!

  """
  Path of the entry.
  """
  path: String!

  """
  Last commit SHA for the entry.
  """
  sha: String!

  """
  Type of tree entry.
  """
  type: EntryType!

  """
  Web path for the tree entry (directory).
  """
  webPath: String

  """
  Web URL for the tree entry (directory).
  """
  webUrl: String
}

"""
The connection type for TreeEntry.
"""
type TreeEntryConnection {
  """
  A list of edges.
  """
  edges: [TreeEntryEdge]

  """
  A list of nodes.
  """
  nodes: [TreeEntry]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TreeEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TreeEntry
}

enum TypeEnum {
  """
  Snippet created independent of any project.
  """
  personal

  """
  Snippet related to a specific project.
  """
  project
}

input UnionedIssueFilterInput {
  """
  Filters issues that are assigned to at least one of the given users.
  """
  assigneeUsernames: [String!]

  """
  Filters issues that are authored by one of the given users.
  """
  authorUsernames: [String!]

  """
  Filters issues that have at least one of the given labels.
  """
  labelNames: [String!]
}

"""
A regexp containing patterns sourced from user input
"""
scalar UntrustedRegexp

"""
Autogenerated input type of UpdateAlertStatus
"""
input UpdateAlertStatusInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the alert to mutate is in.
  """
  projectPath: ID!

  """
  IID of the alert to mutate.
  """
  iid: String!
}

"""
Autogenerated input type of UpdateBoard
"""
input UpdateBoardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Board name.
  """
  name: String

  """
  Whether or not backlog list is hidden.
  """
  hideBacklogList: Boolean

  """
  Whether or not closed list is hidden.
  """
  hideClosedList: Boolean

  """
  Board global ID.
  """
  id: BoardID!
}

"""
Autogenerated input type of UpdateBoardList
"""
input UpdateBoardListInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Position of list within the board.
  """
  position: Int

  """
  Indicates if the list is collapsed for the user.
  """
  collapsed: Boolean

  """
  Global ID of the list.
  """
  listId: ListID!
}

"""
Autogenerated return type of UpdateBoardList.
"""
type UpdateBoardListPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Mutated list.
  """
  list: BoardList
}

"""
Autogenerated return type of UpdateBoard.
"""
type UpdateBoardPayload {
  """
  Board after mutation.
  """
  board: Board

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!
}

"""
Autogenerated input type of UpdateDependencyProxyImageTtlGroupPolicy
"""
input UpdateDependencyProxyImageTtlGroupPolicyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Group path for the group dependency proxy image TTL policy.
  """
  groupPath: ID!

  """
  Indicates whether the policy is enabled or disabled.
  """
  enabled: Boolean

  """
  Number of days to retain a cached image file.
  """
  ttl: Int
}

"""
Autogenerated input type of UpdateDependencyProxySettings
"""
input UpdateDependencyProxySettingsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Group path for the group dependency proxy.
  """
  groupPath: ID!

  """
  Indicates whether the policy is enabled or disabled.
  """
  enabled: Boolean
}

"""
Autogenerated input type of UpdateIssue
"""
input UpdateIssueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Project the issue to mutate is in.
  """
  projectPath: ID!

  """
  IID of the issue to mutate.
  """
  iid: String!

  """
  Description of the issue.
  """
  description: String

  """
  Due date of the issue.
  """
  dueDate: ISO8601Date

  """
  Indicates the issue is confidential.
  """
  confidential: Boolean

  """
  Indicates discussion is locked on the issue.
  """
  locked: Boolean

  """
  Type of the issue.
  """
  type: IssueType

  """
  Title of the issue.
  """
  title: String

  """
  IDs of labels to be added to the issue.
  """
  addLabelIds: [ID!]

  """
  IDs of labels to be removed from the issue.
  """
  removeLabelIds: [ID!]

  """
  IDs of labels to be set. Replaces existing issue labels.
  """
  labelIds: [ID!]

  """
  Close or reopen an issue.
  """
  stateEvent: IssueStateEvent

  """
  Estimated time to complete the issue. Use `null` or `0` to remove the current estimate.
  """
  timeEstimate: String
}

"""
Autogenerated return type of UpdateIssue.
"""
type UpdateIssuePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Issue after mutation.
  """
  issue: Issue
}

"""
Autogenerated input type of UpdateNote
"""
input UpdateNoteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the note to update.
  """
  id: NoteID!

  """
  Content of the note.
  """
  body: String
}

"""
Autogenerated return type of UpdateNote.
"""
type UpdateNotePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Note after mutation.
  """
  note: Note
}

"""
Autogenerated input type of UpdateSnippet
"""
input UpdateSnippetInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the snippet to update.
  """
  id: SnippetID!

  """
  Title of the snippet.
  """
  title: String

  """
  Description of the snippet.
  """
  description: String

  """
  Visibility level of the snippet.
  """
  visibilityLevel: VisibilityLevelsEnum

  """
  Actions to perform over the snippet repository and blobs.
  """
  blobActions: [SnippetBlobActionInputType!]
}

"""
Autogenerated return type of UpdateSnippet.
"""
type UpdateSnippetPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Snippet after mutation.
  """
  snippet: Snippet
}

scalar Upload

"""
Autogenerated input type of UploadDelete
"""
input UploadDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the project with which the resource is associated.
  """
  projectPath: ID

  """
  Full path of the group with which the resource is associated.
  """
  groupPath: ID

  """
  Secret part of upload path.
  """
  secret: String!

  """
  Upload filename.
  """
  filename: String!
}

"""
Autogenerated return type of UploadDelete.
"""
type UploadDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Deleted upload.
  """
  upload: FileUpload
}

"""
A `UploadID` is a global ID. It is encoded as a string.

An example `UploadID` is: `"gid://gitlab/Upload/1"`.
"""
scalar UploadID

"""
Represents a recorded measurement (object count) for the Admins
"""
type UsageTrendsMeasurement {
  """
  Object count.
  """
  count: Int!

  """
  Type of objects being measured.
  """
  identifier: MeasurementIdentifier!

  """
  Time the measurement was recorded.
  """
  recordedAt: Time
}

"""
The connection type for UsageTrendsMeasurement.
"""
type UsageTrendsMeasurementConnection {
  """
  A list of edges.
  """
  edges: [UsageTrendsMeasurementEdge]

  """
  A list of nodes.
  """
  nodes: [UsageTrendsMeasurement]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UsageTrendsMeasurementEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UsageTrendsMeasurement
}

"""
Representation of a GitLab user.
"""
interface User {
  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

type UserCallout {
  """
  Date when the callout was dismissed.
  """
  dismissedAt: Time

  """
  Name of the feature that the callout is for.
  """
  featureName: UserCalloutFeatureNameEnum
}

"""
The connection type for UserCallout.
"""
type UserCalloutConnection {
  """
  A list of edges.
  """
  edges: [UserCalloutEdge]

  """
  A list of nodes.
  """
  nodes: [UserCallout]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of UserCalloutCreate
"""
input UserCalloutCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Feature name you want to dismiss the callout for.
  """
  featureName: String!
}

"""
Autogenerated return type of UserCalloutCreate.
"""
type UserCalloutCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  User callout dismissed.
  """
  userCallout: UserCallout!
}

"""
An edge in a connection.
"""
type UserCalloutEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserCallout
}

"""
Name of the feature that the callout is for.
"""
enum UserCalloutFeatureNameEnum {
  """
  Callout feature name for gke_cluster_integration.
  """
  GKE_CLUSTER_INTEGRATION

  """
  Callout feature name for gcp_signup_offer.
  """
  GCP_SIGNUP_OFFER

  """
  Callout feature name for cluster_security_warning.
  """
  CLUSTER_SECURITY_WARNING

  """
  Callout feature name for ultimate_trial.
  """
  ULTIMATE_TRIAL

  """
  Callout feature name for geo_enable_hashed_storage.
  """
  GEO_ENABLE_HASHED_STORAGE

  """
  Callout feature name for geo_migrate_hashed_storage.
  """
  GEO_MIGRATE_HASHED_STORAGE

  """
  Callout feature name for canary_deployment.
  """
  CANARY_DEPLOYMENT

  """
  Callout feature name for gold_trial_billings.
  """
  GOLD_TRIAL_BILLINGS

  """
  Callout feature name for suggest_popover_dismissed.
  """
  SUGGEST_POPOVER_DISMISSED

  """
  Callout feature name for tabs_position_highlight.
  """
  TABS_POSITION_HIGHLIGHT

  """
  Callout feature name for threat_monitoring_info.
  """
  THREAT_MONITORING_INFO

  """
  Callout feature name for two_factor_auth_recovery_settings_check.
  """
  TWO_FACTOR_AUTH_RECOVERY_SETTINGS_CHECK

  """
  Callout feature name for web_ide_alert_dismissed.
  """
  WEB_IDE_ALERT_DISMISSED

  """
  Callout feature name for active_user_count_threshold.
  """
  ACTIVE_USER_COUNT_THRESHOLD

  """
  Callout feature name for buy_pipeline_minutes_notification_dot.
  """
  BUY_PIPELINE_MINUTES_NOTIFICATION_DOT

  """
  Callout feature name for personal_access_token_expiry.
  """
  PERSONAL_ACCESS_TOKEN_EXPIRY

  """
  Callout feature name for suggest_pipeline.
  """
  SUGGEST_PIPELINE

  """
  Callout feature name for feature_flags_new_version.
  """
  FEATURE_FLAGS_NEW_VERSION

  """
  Callout feature name for registration_enabled_callout.
  """
  REGISTRATION_ENABLED_CALLOUT

  """
  Callout feature name for new_user_signups_cap_reached.
  """
  NEW_USER_SIGNUPS_CAP_REACHED

  """
  Callout feature name for unfinished_tag_cleanup_callout.
  """
  UNFINISHED_TAG_CLEANUP_CALLOUT

  """
  Callout feature name for pipeline_needs_banner.
  """
  PIPELINE_NEEDS_BANNER

  """
  Callout feature name for pipeline_needs_hover_tip.
  """
  PIPELINE_NEEDS_HOVER_TIP

  """
  Callout feature name for web_ide_ci_environments_guidance.
  """
  WEB_IDE_CI_ENVIRONMENTS_GUIDANCE

  """
  Callout feature name for security_configuration_upgrade_banner.
  """
  SECURITY_CONFIGURATION_UPGRADE_BANNER

  """
  Callout feature name for cloud_licensing_subscription_activation_banner.
  """
  CLOUD_LICENSING_SUBSCRIPTION_ACTIVATION_BANNER

  """
  Callout feature name for trial_status_reminder_d14.
  """
  TRIAL_STATUS_REMINDER_D14

  """
  Callout feature name for trial_status_reminder_d3.
  """
  TRIAL_STATUS_REMINDER_D3

  """
  Callout feature name for security_configuration_devops_alert.
  """
  SECURITY_CONFIGURATION_DEVOPS_ALERT

  """
  Callout feature name for profile_personal_access_token_expiry.
  """
  PROFILE_PERSONAL_ACCESS_TOKEN_EXPIRY

  """
  Callout feature name for terraform_notification_dismissed.
  """
  TERRAFORM_NOTIFICATION_DISMISSED

  """
  Callout feature name for security_newsletter_callout.
  """
  SECURITY_NEWSLETTER_CALLOUT

  """
  Callout feature name for verification_reminder.
  """
  VERIFICATION_REMINDER

  """
  Callout feature name for ci_deprecation_warning_for_types_keyword.
  """
  CI_DEPRECATION_WARNING_FOR_TYPES_KEYWORD

  """
  Callout feature name for security_training_feature_promotion.
  """
  SECURITY_TRAINING_FEATURE_PROMOTION

  """
  Callout feature name for namespace_storage_pre_enforcement_banner.
  """
  NAMESPACE_STORAGE_PRE_ENFORCEMENT_BANNER

  """
  Callout feature name for preview_user_over_limit_free_plan_alert.
  """
  PREVIEW_USER_OVER_LIMIT_FREE_PLAN_ALERT

  """
  Callout feature name for user_reached_limit_free_plan_alert.
  """
  USER_REACHED_LIMIT_FREE_PLAN_ALERT

  """
  Callout feature name for submit_license_usage_data_banner.
  """
  SUBMIT_LICENSE_USAGE_DATA_BANNER

  """
  Callout feature name for personal_project_limitations_banner.
  """
  PERSONAL_PROJECT_LIMITATIONS_BANNER

  """
  Callout feature name for mr_experience_survey.
  """
  MR_EXPERIENCE_SURVEY

  """
  Callout feature name for namespace_storage_limit_alert_warning_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_ALERT_WARNING_THRESHOLD

  """
  Callout feature name for namespace_storage_limit_alert_alert_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_ALERT_ALERT_THRESHOLD

  """
  Callout feature name for namespace_storage_limit_alert_error_threshold.
  """
  NAMESPACE_STORAGE_LIMIT_ALERT_ERROR_THRESHOLD

  """
  Callout feature name for project_quality_summary_feedback.
  """
  PROJECT_QUALITY_SUMMARY_FEEDBACK

  """
  Callout feature name for new_top_level_group_alert.
  """
  NEW_TOP_LEVEL_GROUP_ALERT

  """
  Callout feature name for branch_rules_info_callout.
  """
  BRANCH_RULES_INFO_CALLOUT

  """
  Callout feature name for project_repository_limit_alert_warning_threshold.
  """
  PROJECT_REPOSITORY_LIMIT_ALERT_WARNING_THRESHOLD

  """
  Callout feature name for project_repository_limit_alert_alert_threshold.
  """
  PROJECT_REPOSITORY_LIMIT_ALERT_ALERT_THRESHOLD

  """
  Callout feature name for project_repository_limit_alert_error_threshold.
  """
  PROJECT_REPOSITORY_LIMIT_ALERT_ERROR_THRESHOLD

  """
  Callout feature name for namespace_over_storage_users_combined_alert.
  """
  NAMESPACE_OVER_STORAGE_USERS_COMBINED_ALERT

  """
  Callout feature name for vsd_feedback_banner.
  """
  VSD_FEEDBACK_BANNER

  """
  Callout feature name for security_policy_protected_branch_modification.
  """
  SECURITY_POLICY_PROTECTED_BRANCH_MODIFICATION

  """
  Callout feature name for vulnerability_report_grouping.
  """
  VULNERABILITY_REPORT_GROUPING

  """
  Callout feature name for new_nav_for_everyone_callout.
  """
  NEW_NAV_FOR_EVERYONE_CALLOUT

  """
  Callout feature name for duo_chat_callout.
  """
  DUO_CHAT_CALLOUT

  """
  Callout feature name for product_analytics_dashboard_feedback.
  """
  PRODUCT_ANALYTICS_DASHBOARD_FEEDBACK

  """
  Callout feature name for joining_a_project_alert.
  """
  JOINING_A_PROJECT_ALERT

  """
  Callout feature name for transition_to_jihu_callout.
  """
  TRANSITION_TO_JIHU_CALLOUT

  """
  Callout feature name for summarize_code_changes.
  """
  SUMMARIZE_CODE_CHANGES

  """
  Callout feature name for deployment_details_feedback.
  """
  DEPLOYMENT_DETAILS_FEEDBACK

  """
  Callout feature name for deployment_approvals_empty_state.
  """
  DEPLOYMENT_APPROVALS_EMPTY_STATE

  """
  Callout feature name for period_in_terraform_state_name_alert.
  """
  PERIOD_IN_TERRAFORM_STATE_NAME_ALERT
}

"""
Core representation of a GitLab user.
"""
type UserCore implements User {
  """
  URL of the user's avatar.
  """
  avatarUrl: String

  """
  Bio of the user.
  """
  bio: String

  """
  Indicates if the user is a bot.
  """
  bot: Boolean!

  """
  User callouts that belong to the user.
  """
  callouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCalloutConnection

  """
  User's default commit email.
  """
  commitEmail: String

  """
  Projects the user has contributed to.
  """
  contributedProjects(
    """
    Sort contributed projects.
    """
    sort: ProjectSort = LATEST_ACTIVITY_DESC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  Timestamp of when the user was created.
  """
  createdAt: Time

  """
  Discord ID of the user.
  """
  discord: String

  """
  User email. Deprecated in GitLab 13.7: This was renamed.
  """
  email: String
  @deprecated(
    reason: "This was renamed. Please use `User.publicEmail`. Deprecated in GitLab 13.7."
  )

  """
  User's email addresses.
  """
  emails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EmailConnection

  """
  Whether Gitpod is enabled at the user level.
  """
  gitpodEnabled: Boolean

  """
  Group count for the user.
  """
  groupCount: Int

  """
  Group memberships of the user.
  """
  groupMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupMemberConnection

  """
  Groups where the user has access.
  """
  groups(
    """
    Filter by permissions the user has on groups.
    """
    permissionScope: GroupPermission

    """
    Search by group name or path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GroupConnection

  """
  ID of the user.
  """
  id: ID!

  """
  IDE settings.
  """
  ide: Ide

  """
  Job title of the user.
  """
  jobTitle: String

  """
  Date the user last performed any actions.
  """
  lastActivityOn: Date

  """
  LinkedIn profile name of the user.
  """
  linkedin: String

  """
  Location of the user.
  """
  location: String

  """
  Human-readable name of the user. Returns `****` if the user is a project bot and the requester does not have permission to view the project.
  """
  name: String!

  """
  Personal namespace of the user.
  """
  namespace: Namespace

  """
  User's custom namespace commit emails.
  """
  namespaceCommitEmails(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NamespaceCommitEmailConnection

  """
  Who the user represents or works for.
  """
  organization: String

  """
  Organizations where the user has access. Introduced in GitLab 16.6: **Status**: Experiment.
  """
  organizations(
    """
    Search query, which can be for the organization name or a path.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.6.")

  """
  Web path to the Gitpod section within user preferences.
  """
  preferencesGitpodPath: String

  """
  Web path to enable Gitpod for the user.
  """
  profileEnableGitpodPath: String

  """
  Project memberships of the user.
  """
  projectMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectMemberConnection

  """
  Pronouns of the user.
  """
  pronouns: String

  """
  User's public email.
  """
  publicEmail: String

  """
  Merge requests assigned to the user for review.
  """
  reviewRequestedMergeRequests(
    """
    Array of IIDs of merge requests, for example `[1, 2]`.
    """
    iids: [String!]

    """
    Merge request state. If provided, all resolved merge requests will have the state.
    """
    state: MergeRequestState

    """
    Limit result to draft merge requests.
    """
    draft: Boolean

    """
    Limit results to approved merge requests.
    Available only when the feature flag `mr_approved_filter` is enabled.
    """
    approved: Boolean

    """
    Merge requests created after the timestamp.
    """
    createdAfter: Time

    """
    Merge requests created before the timestamp.
    """
    createdBefore: Time

    """
    Merge requests deployed after the timestamp.
    """
    deployedAfter: Time

    """
    Merge requests deployed before the timestamp.
    """
    deployedBefore: Time

    """
    ID of the deployment.
    """
    deploymentId: String

    """
    Merge requests updated after the timestamp.
    """
    updatedAfter: Time

    """
    Merge requests updated before the timestamp.
    """
    updatedBefore: Time

    """
    Array of label names. All resolved merge requests will have all of these labels.
    """
    labels: [String!]

    """
    Merge requests merged after the date.
    """
    mergedAfter: Time

    """
    Merge requests merged before the date.
    """
    mergedBefore: Time

    """
    The global ID of the group the authored merge requests should be in.
    Merge requests in subgroups are included.
    """
    groupId: GroupID

    """
    The full-path of the project the authored merge requests should be in.
    Incompatible with projectId.
    """
    projectPath: String

    """
    The global ID of the project the authored merge requests should be in.
    Incompatible with projectPath.
    """
    projectId: ProjectID

    """
    Username of the author.
    """
    authorUsername: String

    """
    Username of the assignee.
    """
    assigneeUsername: String

    """
    Filter by assignee presence. Incompatible with assigneeUsernames and assigneeUsername.
    """
    assigneeWildcardId: AssigneeWildcardId

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MergeRequestConnection

  """
  Saved replies authored by the user.
  """
  savedReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SavedReplyConnection

  """
  Saved reply authored by the user.
  """
  savedReply(
    """
    ID of a saved reply.
    """
    id: UsersSavedReplyID!
  ): SavedReply

  """
  Snippets authored by the user.
  """
  snippets(
    """
    Array of global snippet IDs. For example, `gid://gitlab/ProjectSnippet/1`.
    """
    ids: [SnippetID!]

    """
    Visibility of the snippet.
    """
    visibility: VisibilityScopesEnum

    """
    Type of snippet.
    """
    type: TypeEnum

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SnippetConnection

  """
  Projects starred by the user.
  """
  starredProjects(
    """
    Search query.
    """
    search: String

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection

  """
  State of the user.
  """
  state: UserState!

  """
  User status.
  """
  status: UserStatus

  """
  Time logged by the user.
  """
  timelogs(
    """
    List timelogs within a date range where the logged date is equal to or after startDate.
    """
    startDate: Time

    """
    List timelogs within a date range where the logged date is equal to or before endDate.
    """
    endDate: Time

    """
    List timelogs within a time range where the logged time is equal to or after startTime.
    """
    startTime: Time

    """
    List timelogs within a time range where the logged time is equal to or before endTime.
    """
    endTime: Time

    """
    List timelogs for a project.
    """
    projectId: ProjectID

    """
    List timelogs for a group.
    """
    groupId: GroupID

    """
    List timelogs for a user.
    """
    username: String

    """
    List timelogs in a particular order.
    """
    sort: TimelogSort = SPENT_AT_ASC

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TimelogConnection

  """
  X (formerly Twitter) username of the user.
  """
  twitter: String

  """
  Permissions for the current user on the resource.
  """
  userPermissions: UserPermissions!

  """
  Username of the user. Unique within this instance of GitLab.
  """
  username: String!

  """
  Web path of the user.
  """
  webPath: String!

  """
  Web URL of the user.
  """
  webUrl: String!
}

"""
The connection type for UserCore.
"""
type UserCoreConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [UserCoreEdge]

  """
  A list of nodes.
  """
  nodes: [UserCore]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserCoreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserCore
}

"""
A `UserID` is a global ID. It is encoded as a string.

An example `UserID` is: `"gid://gitlab/User/1"`.
"""
scalar UserID

"""
Information about a merge request given a specific user.

This object has two parts to its state: a `User` and a `MergeRequest`. All
fields relate to interactions between the two entities.
"""
type UserMergeRequestInteraction {
  """
  Whether this user has approved this merge request.
  """
  approved: Boolean!

  """
  Whether this user can merge this merge request.
  """
  canMerge: Boolean!

  """
  Whether this user can update this merge request.
  """
  canUpdate: Boolean!

  """
  State of the review by this user.
  """
  reviewState: MergeRequestReviewState

  """
  Whether this user has provided a review for this merge request.
  """
  reviewed: Boolean!
}

type UserPermissions {
  """
  If `true`, the user can perform `create_snippet` on this resource
  """
  createSnippet: Boolean!
}

type UserPreferences {
  """
  Status of the Web IDE Extension Marketplace opt-in for the user.
  """
  extensionsMarketplaceOptInStatus: ExtensionsMarketplaceOptInStatus!

  """
  Sort order for issue lists.
  """
  issuesSort: IssueSort

  """
  Whether Web IDE Extension Marketplace is enabled for the user. Deprecated in GitLab 16.11: Use `extensions_marketplace_opt_in_status` instead.
  """
  useWebIdeExtensionMarketplace: Boolean!
  @deprecated(
    reason: "Use `extensions_marketplace_opt_in_status` instead. Deprecated in GitLab 16.11."
  )

  """
  Determines whether the pipeline list shows ID or IID.
  """
  visibilityPipelineIdType: VisibilityPipelineIdType
}

"""
Autogenerated input type of UserPreferencesUpdate
"""
input UserPreferencesUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Status of the Web IDE Extension Marketplace opt-in for the user.
  """
  extensionsMarketplaceOptInStatus: ExtensionsMarketplaceOptInStatus

  """
  Sort order for issue lists.
  """
  issuesSort: IssueSort

  """
  Whether Web IDE Extension Marketplace is enabled for the user.
  """
  useWebIdeExtensionMarketplace: Boolean

  """
  Determines whether the pipeline list shows ID or IID.
  """
  visibilityPipelineIdType: VisibilityPipelineIdType
}

"""
Autogenerated return type of UserPreferencesUpdate.
"""
type UserPreferencesUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  User preferences after mutation.
  """
  userPreferences: UserPreferences
}

"""
Autogenerated input type of UserSetNamespaceCommitEmail
"""
input UserSetNamespaceCommitEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the namespace to set the namespace commit email for.
  """
  namespaceId: NamespaceID!

  """
  ID of the email to set.
  """
  emailId: EmailID
}

"""
Autogenerated return type of UserSetNamespaceCommitEmail.
"""
type UserSetNamespaceCommitEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  User namespace commit email after mutation.
  """
  namespaceCommitEmail: NamespaceCommitEmail
}

"""
Possible states of a user
"""
enum UserState {
  """
  User is active and can use the system.
  """
  active

  """
  User has been blocked by an administrator and cannot use the system.
  """
  blocked

  """
  User is no longer active and cannot use the system.
  """
  deactivated

  """
  User is blocked, and their contributions are hidden.
  """
  banned

  """
  User has been blocked by the system.
  """
  ldap_blocked

  """
  User is blocked and pending approval.
  """
  blocked_pending_approval
}

type UserStatus {
  """
  User availability status.
  """
  availability: AvailabilityEnum!

  """
  String representation of emoji.
  """
  emoji: String

  """
  User status message.
  """
  message: String

  """
  HTML of the user status message
  """
  messageHtml: String
}

"""
A `UsersSavedReplyID` is a global ID. It is encoded as a string.

An example `UsersSavedReplyID` is: `"gid://gitlab/Users::SavedReply/1"`.
"""
scalar UsersSavedReplyID

"""
"""
type ValueStreamAnalyticsMetric {
  """
  Identifier for the metric.
  """
  identifier: String!

  """
  Optional links for drilling down.
  """
  links: [ValueStreamMetricLinkType!]!

  """
  Title for the metric.
  """
  title: String!

  """
  Unit of measurement.
  """
  unit: String

  """
  Value for the metric.
  """
  value: Float
}

type ValueStreamMetricLinkType {
  """
  Link to the metric documentation.
  """
  docsLink: Boolean

  """
  Label for the link.
  """
  label: String!

  """
  Name of the link group.
  """
  name: String!

  """
  Drill-down URL.
  """
  url: String!
}

enum VisibilityLevelsEnum {
  """
  Private visibility level.
  """
  private

  """
  Internal visibility level.
  """
  internal

  """
  Public visibility level.
  """
  public
}

"""
Determines whether the pipeline list shows ID or IID
"""
enum VisibilityPipelineIdType {
  """
  Display pipeline ID.
  """
  ID

  """
  Display pipeline IID.
  """
  IID
}

enum VisibilityScopesEnum {
  """
  Snippet is visible only to the snippet creator.
  """
  private

  """
  Snippet is visible for any logged in user except external users.
  """
  internal

  """
  Snippet can be accessed without any authentication.
  """
  public
}

type WorkItem implements Todoable {
  """
  Whether the work item belongs to an archived project. Always false for group level work items. Introduced in GitLab 16.5: **Status**: Experiment.
  """
  archived: Boolean!
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.5.")

  """
  User that created the work item. Introduced in GitLab 15.9: **Status**: Experiment.
  """
  author: UserCore
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.9.")

  """
  Timestamp of when the work item was closed.
  """
  closedAt: Time

  """
  Indicates the work item is confidential.
  """
  confidential: Boolean!

  """
  User specific email address for the work item.
  """
  createNoteEmail: String

  """
  Timestamp of when the work item was created.
  """
  createdAt: Time!

  """
  Description of the work item.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Internal ID of the work item.
  """
  iid: String!

  """
  Lock version of the work item. Incremented each time the work item is updated.
  """
  lockVersion: Int!

  """
  Namespace the work item belongs to. Introduced in GitLab 15.10: **Status**: Experiment.
  """
  namespace: Namespace
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.10.")

  """
  Project the work item belongs to. Introduced in GitLab 15.3: **Status**: Experiment.
  """
  project: Project
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 15.3.")

  """
  Internal reference of the work item. Returned in shortened format by default.
  """
  reference(
    """
    Boolean option specifying whether the reference should be returned in full.
    """
    full: Boolean = false
  ): String!

  """
  State of the work item.
  """
  state: WorkItemState!

  """
  Title of the work item.
  """
  title: String!

  """
  GitLab Flavored Markdown rendering of `title`
  """
  titleHtml: String

  """
  Timestamp of when the work item was last updated.
  """
  updatedAt: Time!

  """
  Permissions for the current user on the resource
  """
  userPermissions: WorkItemPermissions!

  """
  URL of this object.
  """
  webUrl: String

  """
  Collection of widgets that belong to the work item.
  """
  widgets: [WorkItemWidget!]

  """
  Type assigned to the work item.
  """
  workItemType: WorkItemType!
}

"""
Autogenerated input type of WorkItemAddClosingMergeRequest
"""
input WorkItemAddClosingMergeRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Full path of the context namespace (project or group). Only project full paths are used to find a merge request using a short reference syntax like `!1`. Ignored for full references and URLs. Defaults to the namespace of the work item if not provided.
  """
  contextNamespacePath: ID

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Merge request reference (short, full or URL). Example: `!1`, `project_full_path!1` or `https://gitlab.com/gitlab-org/gitlab/-/merge_requests/1`.
  """
  mergeRequestReference: String!
}

"""
Autogenerated return type of WorkItemAddClosingMergeRequest.
"""
type WorkItemAddClosingMergeRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Closing merge request added to the work item.
  """
  closingMergeRequest: WorkItemClosingMergeRequest

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Work item with new closing merge requests.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemAddLinkedItems
"""
input WorkItemAddLinkedItemsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Type of link. Defaults to `RELATED`.
  """
  linkType: WorkItemRelatedLinkType

  """
  Global IDs of the items to link. Maximum number of IDs you can provide: 10.
  """
  workItemsIds: [WorkItemID!]!
}

"""
Autogenerated return type of WorkItemAddLinkedItems.
"""
type WorkItemAddLinkedItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Linked items update result message.
  """
  message: String

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Values for work item award emoji update enum
"""
enum WorkItemAwardEmojiUpdateAction {
  """
  Adds the emoji.
  """
  ADD

  """
  Removes the emoji.
  """
  REMOVE

  """
  Toggles the status of the emoji.
  """
  TOGGLE
}

type WorkItemClosingMergeRequest {
  """
  Whether this merge request link was created by referencing the work item on the merge request description, using the closing pattern.
  """
  fromMrDescription: Boolean!

  """
  Global ID of the closing merge request association.
  """
  id: MergeRequestsClosingIssuesID!

  """
  Related merge request.
  """
  mergeRequest: MergeRequest
}

"""
The connection type for WorkItemClosingMergeRequest.
"""
type WorkItemClosingMergeRequestConnection {
  """
  A list of edges.
  """
  edges: [WorkItemClosingMergeRequestEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItemClosingMergeRequest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type WorkItemClosingMergeRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItemClosingMergeRequest
}

"""
The connection type for WorkItem.
"""
type WorkItemConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [WorkItemEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated input type of WorkItemConvert
"""
input WorkItemConvertInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Global ID of the new work item type.
  """
  workItemTypeId: WorkItemsTypeID!
}

"""
Autogenerated return type of WorkItemConvert.
"""
type WorkItemConvertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated work item.
  """
  workItem: WorkItem
}

input WorkItemConvertTaskInput {
  """
  Last line in the Markdown source that defines the list item task.
  """
  lineNumberEnd: Int!

  """
  First line in the Markdown source that defines the list item task.
  """
  lineNumberStart: Int!

  """
  Current lock version of the work item containing the task in the description.
  """
  lockVersion: Int!

  """
  Full string of the task to be replaced. New title for the created work item.
  """
  title: String!

  """
  Global ID of the work item type used to create the new work item.
  """
  workItemTypeId: WorkItemsTypeID!
}

"""
Autogenerated input type of WorkItemCreateFromTask
"""
input WorkItemCreateFromTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Arguments necessary to convert a task into a work item.
  """
  workItemData: WorkItemConvertTaskInput!
}

"""
Autogenerated return type of WorkItemCreateFromTask.
"""
type WorkItemCreateFromTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  New work item created from task.
  """
  newWorkItem: WorkItem

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemCreate
"""
input WorkItemCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Input for assignees widget.
  """
  assigneesWidget: WorkItemWidgetAssigneesInput

  """
  Sets the work item confidentiality.
  """
  confidential: Boolean

  """
  Input for description widget.
  """
  descriptionWidget: WorkItemWidgetDescriptionInput

  """
  Input for hierarchy widget.
  """
  hierarchyWidget: WorkItemWidgetHierarchyCreateInput

  """
  Input for labels widget.
  """
  labelsWidget: WorkItemWidgetLabelsCreateInput

  """
  Full path of the namespace(project or group) the work item is created in.
  """
  namespacePath: ID

  """
  Title of the work item.
  """
  title: String!

  """
  Global ID of a work item type.
  """
  workItemTypeId: WorkItemsTypeID!
}

"""
Autogenerated return type of WorkItemCreate.
"""
type WorkItemCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Created work item.
  """
  workItem: WorkItem
}

"""
Autogenerated input type of WorkItemDelete
"""
input WorkItemDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!
}

"""
Autogenerated return type of WorkItemDelete.
"""
type WorkItemDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Namespace the deleted work item belonged to.
  """
  namespace: Namespace

  """
  Project the deleted work item belonged to. Deprecated in GitLab 16.9: Use `namespace`.
  """
  project: Project
  @deprecated(reason: "Use `namespace`. Deprecated in GitLab 16.9.")
}

"""
An edge in a connection.
"""
type WorkItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItem
}

"""
Autogenerated input type of WorkItemExport
"""
input WorkItemExportInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  List of IIDs of work items. For example, `["1", "2"]`.
  """
  iids: [String!]

  """
  Current state of the work item.
  """
  state: IssuableState

  """
  Filter work items by the given work item types.
  """
  types: [IssueType!]

  """
  Search query for title or description.
  """
  search: String

  """
  Full project path.
  """
  projectPath: ID!

  """
  List of selected fields to be exported. Omit to export all available fields.
  """
  selectedFields: [AvailableExportFields!]
}

"""
Autogenerated return type of WorkItemExport.
"""
type WorkItemExportPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Export request result message.
  """
  message: String
}

"""
A `WorkItemID` is a global ID. It is encoded as a string.

An example `WorkItemID` is: `"gid://gitlab/WorkItem/1"`.

While we transition from Issues into Work Items this type will temporarily support
`IssueID` like: `"gid://gitlab/Issue/1"`. This behavior will be removed without notice in the future.
"""
scalar WorkItemID

"""
Check permissions for the current user on a work item
"""
type WorkItemPermissions {
  """
  If `true`, the user can perform `admin_parent_link` on this resource
  """
  adminParentLink: Boolean!

  """
  If `true`, the user can perform `admin_work_item` on this resource
  """
  adminWorkItem: Boolean!

  """
  If `true`, the user can perform `admin_work_item_link` on this resource
  """
  adminWorkItemLink: Boolean!

  """
  If `true`, the user can perform `create_note` on this resource
  """
  createNote: Boolean!

  """
  If `true`, the user can perform `delete_work_item` on this resource
  """
  deleteWorkItem: Boolean!

  """
  If `true`, the user can perform `read_work_item` on this resource
  """
  readWorkItem: Boolean!

  """
  If `true`, the user can perform `set_work_item_metadata` on this resource
  """
  setWorkItemMetadata: Boolean!

  """
  If `true`, the user can perform `update_work_item` on this resource
  """
  updateWorkItem: Boolean!
}

"""
Values for work item link types
"""
enum WorkItemRelatedLinkType {
  """
  Related type.
  """
  RELATED
}

"""
Autogenerated input type of WorkItemRemoveLinkedItems
"""
input WorkItemRemoveLinkedItemsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Global IDs of the items to unlink. Maximum number of IDs you can provide: 10.
  """
  workItemsIds: [WorkItemID!]!
}

"""
Autogenerated return type of WorkItemRemoveLinkedItems.
"""
type WorkItemRemoveLinkedItemsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Linked items update result message.
  """
  message: String

  """
  Updated work item.
  """
  workItem: WorkItem
}

"""
Values for sorting work items
"""
enum WorkItemSort {
  """
  Title by ascending order.
  """
  TITLE_ASC

  """
  Title by descending order.
  """
  TITLE_DESC

  """
  Updated at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_desc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  updated_asc
  @deprecated(
    reason: "This was renamed. Please use `UPDATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Created at descending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_desc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_DESC`. Deprecated in GitLab 13.5."
  )

  """
  Created at ascending order. Deprecated in GitLab 13.5: This was renamed.
  """
  created_asc
  @deprecated(
    reason: "This was renamed. Please use `CREATED_ASC`. Deprecated in GitLab 13.5."
  )

  """
  Updated at descending order.
  """
  UPDATED_DESC

  """
  Updated at ascending order.
  """
  UPDATED_ASC

  """
  Created at descending order.
  """
  CREATED_DESC

  """
  Created at ascending order.
  """
  CREATED_ASC
}

"""
State of a GitLab work item
"""
enum WorkItemState {
  """
  In open state.
  """
  OPEN

  """
  In closed state.
  """
  CLOSED
}

"""
Represents total number of work items for the represented states
"""
type WorkItemStateCountsType {
  """
  Number of work items for the project or group.
  """
  all: Int

  """
  Number of work items with state CLOSED for the project or group.
  """
  closed: Int

  """
  Number of work items with state OPENED for the project or group.
  """
  opened: Int
}

"""
Values for work item state events
"""
enum WorkItemStateEvent {
  """
  Reopens the work item.
  """
  REOPEN

  """
  Closes the work item.
  """
  CLOSE
}

"""
Autogenerated input type of WorkItemSubscribe
"""
input WorkItemSubscribeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Desired state of the subscription.
  """
  subscribed: Boolean!
}

"""
Autogenerated return type of WorkItemSubscribe.
"""
type WorkItemSubscribePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Work item after mutation.
  """
  workItem: WorkItem
}

type WorkItemTimelog {
  """
  Internal ID of the timelog.
  """
  id: ID!

  """
  Note where the quick action was executed to add the logged time.
  """
  note: Note

  """
  Timestamp of when the time tracked was spent at.
  """
  spentAt: Time

  """
  Summary of how the time was spent.
  """
  summary: String

  """
  Time spent displayed in seconds.
  """
  timeSpent: Int!

  """
  User that logged the time.
  """
  user: UserCore!

  """
  Permissions for the current user on the resource
  """
  userPermissions: TimelogPermissions!
}

"""
The connection type for WorkItemTimelog.
"""
type WorkItemTimelogConnection {
  """
  Total count of collection.
  """
  count: Int!

  """
  A list of edges.
  """
  edges: [WorkItemTimelogEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItemTimelog]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total time spent in seconds.
  """
  totalSpentTime: BigInt!
}

"""
An edge in a connection.
"""
type WorkItemTimelogEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItemTimelog
}

"""
Values for work item to-do update enum
"""
enum WorkItemTodoUpdateAction {
  """
  Marks the to-do as done.
  """
  MARK_AS_DONE

  """
  Adds the to-do.
  """
  ADD
}

type WorkItemType {
  """
  Icon name of the work item type.
  """
  iconName: String

  """
  Global ID of the work item type.
  """
  id: WorkItemsTypeID!

  """
  Name of the work item type.
  """
  name: String!

  """
  Available widgets for the work item type. Introduced in GitLab 16.7: **Status**: Experiment.
  """
  widgetDefinitions: [WorkItemWidgetDefinition!]
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.7.")
}

"""
The connection type for WorkItemType.
"""
type WorkItemTypeConnection {
  """
  A list of edges.
  """
  edges: [WorkItemTypeEdge]

  """
  A list of nodes.
  """
  nodes: [WorkItemType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type WorkItemTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WorkItemType
}

"""
Autogenerated input type of WorkItemUpdate
"""
input WorkItemUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the work item.
  """
  id: WorkItemID!

  """
  Close or reopen a work item.
  """
  stateEvent: WorkItemStateEvent

  """
  Title of the work item.
  """
  title: String

  """
  Sets the work item confidentiality.
  """
  confidential: Boolean

  """
  Input for description widget.
  """
  descriptionWidget: WorkItemWidgetDescriptionInput

  """
  Input for assignees widget.
  """
  assigneesWidget: WorkItemWidgetAssigneesInput

  """
  Input for hierarchy widget.
  """
  hierarchyWidget: WorkItemWidgetHierarchyUpdateInput

  """
  Input for start and due date widget.
  """
  startAndDueDateWidget: WorkItemWidgetStartAndDueDateUpdateInput

  """
  Input for labels widget.
  """
  labelsWidget: WorkItemWidgetLabelsUpdateInput

  """
  Input for notifications widget.
  """
  notificationsWidget: WorkItemWidgetNotificationsUpdateInput

  """
  Input for emoji reactions widget.
  """
  awardEmojiWidget: WorkItemWidgetAwardEmojiUpdateInput

  """
  Input for notes widget.
  """
  notesWidget: WorkItemWidgetNotesInput

  """
  Input for time tracking widget.
  """
  timeTrackingWidget: WorkItemWidgetTimeTrackingInput
}

"""
Autogenerated return type of WorkItemUpdate.
"""
type WorkItemUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [String!]!

  """
  Updated work item.
  """
  workItem: WorkItem
}

interface WorkItemWidget {
  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents an assignees widget
"""
type WorkItemWidgetAssignees implements WorkItemWidget {
  """
  Indicates whether multiple assignees are allowed. Deprecated in GitLab 16.7: Field moved to workItemType widget definition interface.
  """
  allowsMultipleAssignees: Boolean
  @deprecated(
    reason: "Field moved to workItemType widget definition interface. Please use `workitemWidgetDefinitionAssignees.allowsMultipleAssignees`. Deprecated in GitLab 16.7."
  )

  """
  Assignees of the work item.
  """
  assignees(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Indicates whether the current user can invite members to the work item's project. Deprecated in GitLab 16.7: Field moved to workItemType widget definition interface.
  """
  canInviteMembers: Boolean!
  @deprecated(
    reason: "Field moved to workItemType widget definition interface. Please use `workitemWidgetDefinitionAssignees.canInviteMembers`. Deprecated in GitLab 16.7."
  )

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetAssigneesInput {
  """
  Global IDs of assignees.
  """
  assigneeIds: [UserID!]!
}

"""
Represents the emoji reactions widget
"""
type WorkItemWidgetAwardEmoji implements WorkItemWidget {
  """
  Number of downvotes the work item has received.
  """
  downvotes: Int!

  """
  Widget type.
  """
  type: WorkItemWidgetType

  """
  Number of upvotes the work item has received.
  """
  upvotes: Int!
}

input WorkItemWidgetAwardEmojiUpdateInput {
  """
  Action for the update.
  """
  action: WorkItemAwardEmojiUpdateAction!

  """
  Emoji name.
  """
  name: String!
}

interface WorkItemWidgetDefinition {
  """
  Widget type.
  """
  type: WorkItemWidgetType!
}

"""
Represents an assignees widget definition
"""
type WorkItemWidgetDefinitionAssignees implements WorkItemWidgetDefinition {
  """
  Indicates whether the current user can invite members to the work item's parent.
  """
  canInviteMembers: Boolean!

  """
  Widget type.
  """
  type: WorkItemWidgetType!
}

"""
Represents a generic widget definition
"""
type WorkItemWidgetDefinitionGeneric implements WorkItemWidgetDefinition {
  """
  Widget type.
  """
  type: WorkItemWidgetType!
}

"""
Represents a hierarchy widget definition
"""
type WorkItemWidgetDefinitionHierarchy implements WorkItemWidgetDefinition {
  """
  Allowed child types for the work item type.
  """
  allowedChildTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemTypeConnection

  """
  Allowed parent types for the work item type.
  """
  allowedParentTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemTypeConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType!
}

"""
Represents a description widget
"""
type WorkItemWidgetDescription implements WorkItemWidget {
  """
  Description of the work item.
  """
  description: String

  """
  GitLab Flavored Markdown rendering of `description`
  """
  descriptionHtml: String

  """
  Whether the description has been edited since the work item was created.
  """
  edited: Boolean!

  """
  Timestamp of when the work item's description was last edited.
  """
  lastEditedAt: Time

  """
  User that made the last edit to the work item's description.
  """
  lastEditedBy: UserCore

  """
  Task completion status of the work item.
  """
  taskCompletionStatus: TaskCompletionStatus!

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetDescriptionInput {
  """
  Description of the work item.
  """
  description: String!
}

"""
Represents a development widget
"""
type WorkItemWidgetDevelopment implements WorkItemWidget {
  """
  Merge requests that will close the work item when merged.
  """
  closingMergeRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemClosingMergeRequestConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents a hierarchy widget
"""
type WorkItemWidgetHierarchy implements WorkItemWidget {
  """
  Ancestors (parents) of the work item.
  """
  ancestors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection

  """
  Child work items.
  """
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemConnection

  """
  Indicates if the work item has children.
  """
  hasChildren: Boolean!

  """
  Parent work item.
  """
  parent: WorkItem

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetHierarchyCreateInput {
  """
  Global ID of the parent work item.
  """
  parentId: WorkItemID
}

input WorkItemWidgetHierarchyUpdateInput {
  """
  ID of the work item to be switched with.
  """
  adjacentWorkItemId: WorkItemID

  """
  Global IDs of children work items.
  """
  childrenIds: [WorkItemID!]

  """
  Global ID of the parent work item. Use `null` to remove the association.
  """
  parentId: WorkItemID

  """
  Type of switch. Valid values are `BEFORE` or `AFTER`.
  """
  relativePosition: RelativePositionType
}

"""
Represents the labels widget
"""
type WorkItemWidgetLabels implements WorkItemWidget {
  """
  Indicates whether a scoped label is allowed. Deprecated in GitLab 16.7: Field moved to workItemType widget definition interface.
  """
  allowsScopedLabels: Boolean
  @deprecated(
    reason: "Field moved to workItemType widget definition interface. Please use `WorkItemWidgetDefinitionLabels.allowsScopedLabels`. Deprecated in GitLab 16.7."
  )

  """
  Labels assigned to the work item.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LabelConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetLabelsCreateInput {
  """
  IDs of labels to be added to the work item.
  """
  labelIds: [LabelID!]!
}

input WorkItemWidgetLabelsUpdateInput {
  """
  Global IDs of labels to be added to the work item.
  """
  addLabelIds: [LabelID!]

  """
  Global IDs of labels to be removed from the work item.
  """
  removeLabelIds: [LabelID!]
}

"""
Represents the linked items widget
"""
type WorkItemWidgetLinkedItems implements WorkItemWidget {
  """
  Linked items for the work item. Introduced in GitLab 16.3: **Status**: Experiment.
  """
  linkedItems(
    """
    Filter by link type. Supported values: RELATED. Returns all types if omitted.
    """
    filter: WorkItemRelatedLinkType

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LinkedWorkItemTypeConnection
  @deprecated(reason: "**Status**: Experiment. Introduced in GitLab 16.3.")

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents a notes widget
"""
type WorkItemWidgetNotes implements WorkItemWidget {
  """
  Discussion lock attribute of the work item.
  """
  discussionLocked: Boolean

  """
  Notes on this work item.
  """
  discussions(
    """
    Type of notes collection: ALL_NOTES, ONLY_COMMENTS, ONLY_ACTIVITY.
    """
    filter: NotesFilterType = ALL_NOTES

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
  ): DiscussionConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetNotesInput {
  """
  Discussion lock attribute for notes widget of the work item.
  """
  discussionLocked: Boolean!
}

"""
Represents the notifications widget
"""
type WorkItemWidgetNotifications implements WorkItemWidget {
  """
  Whether the current user is subscribed to notifications on the work item.
  """
  subscribed: Boolean!

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetNotificationsUpdateInput {
  """
  Desired state of the subscription.
  """
  subscribed: Boolean!
}

"""
Represents a participants widget
"""
type WorkItemWidgetParticipants implements WorkItemWidget {
  """
  Participants in the work item.
  """
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCoreConnection

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

"""
Represents a start and due date widget
"""
type WorkItemWidgetStartAndDueDate implements WorkItemWidget {
  """
  Due date of the work item.
  """
  dueDate: Date

  """
  Start date of the work item.
  """
  startDate: Date

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetStartAndDueDateUpdateInput {
  """
  Due date for the work item.
  """
  dueDate: Date

  """
  Start date for the work item.
  """
  startDate: Date
}

"""
Represents a time tracking widget
"""
type WorkItemWidgetTimeTracking implements WorkItemWidget {
  """
  Time estimate of the work item.
  """
  timeEstimate: Int

  """
  Timelogs on the work item.
  """
  timelogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WorkItemTimelogConnection

  """
  Total time (in seconds) reported as spent on the work item.
  """
  totalTimeSpent: Int

  """
  Widget type.
  """
  type: WorkItemWidgetType
}

input WorkItemWidgetTimeTrackingInput {
  """
  Time estimate for the work item in human readable format. For example: 1h 30m.
  """
  timeEstimate: String

  """
  Timelog data for time spent on the work item.
  """
  timelog: WorkItemWidgetTimeTrackingTimelogInput
}

input WorkItemWidgetTimeTrackingTimelogInput {
  """
  Amount of time spent in human readable format. For example: 1h 30m.
  """
  timeSpent: String!

  """
  Timestamp of when the time tracked was spent at, if not provided would be set to current timestamp.
  """
  spentAt: Time

  """
  Summary of how the time was spent.
  """
  summary: String
}

"""
Type of a work item widget
"""
enum WorkItemWidgetType {
  """
  Assignees widget.
  """
  ASSIGNEES

  """
  Description widget.
  """
  DESCRIPTION

  """
  Hierarchy widget.
  """
  HIERARCHY

  """
  Labels widget.
  """
  LABELS

  """
  Notes widget.
  """
  NOTES

  """
  Start And Due Date widget.
  """
  START_AND_DUE_DATE

  """
  Notifications widget.
  """
  NOTIFICATIONS

  """
  Current User Todos widget.
  """
  CURRENT_USER_TODOS

  """
  Award Emoji widget.
  """
  AWARD_EMOJI

  """
  Linked Items widget.
  """
  LINKED_ITEMS

  """
  Participants widget.
  """
  PARTICIPANTS

  """
  Time Tracking widget.
  """
  TIME_TRACKING

  """
  Designs widget.
  """
  DESIGNS

  """
  Development widget.
  """
  DEVELOPMENT
}

"""
A `WorkItemsRelatedWorkItemLinkID` is a global ID. It is encoded as a string.

An example `WorkItemsRelatedWorkItemLinkID` is: `"gid://gitlab/WorkItems::RelatedWorkItemLink/1"`.
"""
scalar WorkItemsRelatedWorkItemLinkID

"""
A `WorkItemsTypeID` is a global ID. It is encoded as a string.

An example `WorkItemsTypeID` is: `"gid://gitlab/WorkItems::Type/1"`.
"""
scalar WorkItemsTypeID
